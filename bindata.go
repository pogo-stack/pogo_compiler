// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x6e\xe3\x30\x0c\x3c\xc7\xaf\xe0\x41\x80\x6c\x20\xd8\xcd\xee\x31\xd9\xed\x47\xd2\x80\x90\x65\xc6\x76\x62\x4b\x06\x45\x05\xed\xef\x0b\xaa\x8d\xd1\xf4\x94\x8b\x31\x1c\x8e\x35\x1c\xf2\x55\x2a\xcf\xe4\x84\xe0\x9c\x83\x97\x31\x06\x30\x77\x64\xa0\x36\x8b\x63\x37\x93\x10\x27\xd3\x54\x4c\x92\x39\x24\x30\x5f\xc0\x80\x4b\x60\x4c\xd5\x91\x9f\x1c\x53\xb5\x41\x8f\x20\xe3\x4c\x49\xdc\xbc\xc0\xfe\x3f\xf8\x29\xfa\x2b\xae\x54\xdd\x1c\xaa\x0d\x0a\x82\xd0\x9b\x28\x9c\x10\xc6\x20\xd4\x13\xab\x7a\xa7\xd4\x0d\xe1\xe6\xd8\x0f\x8e\x8f\x27\xad\xc3\x83\xe4\x8f\x52\xdd\x03\x65\x3a\x6a\x73\x6f\x4a\x23\x21\x5c\x52\x0c\xad\xf2\x05\x60\x9b\xc7\xa9\xc3\xd8\x5e\xc8\x8b\xda\x03\x00\xa8\xae\x7d\x52\x7a\xd6\xfc\xd8\xd1\x22\xc3\xea\x5a\x42\x0c\x4c\xae\xc3\xb1\x5b\xc7\xd5\x87\x6a\x1f\xdd\x44\xc9\x53\x1d\xf2\x34\x8d\xe7\xda\x67\x66\x0a\x82\x89\x44\xc6\xd0\xd7\x16\x71\x89\x7d\xfc\xb5\xfe\x6e\xb7\x20\x9c\xa9\xd9\x82\xb5\xfa\xf9\x17\x7e\xbb\x17\xdb\x94\x45\x0d\x0f\x39\xff\xee\xca\x7e\x88\xf9\x87\xa9\xb5\x65\xa0\xe7\x76\x3f\x7f\x8b\x6d\x8f\x27\xbb\xdf\x97\x52\x7b\x8c\xa0\xb3\x21\x7e\x9e\x17\x51\xde\x17\x3a\x54\x9b\x9b\x7a\x46\xc6\x24\xce\x5f\xcb\xe9\xee\xae\x1f\x01\x00\x00\xff\xff\xd5\x41\xfa\xb1\x3e\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 574, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xeb\x5e\xc2\x77\xf8\xf2\xfd\x9f\xe6\xb2\x32\x19\xc3\x3a\x25\x5b\xed\x02\xfe\x8f\x3c\x44\x7f\x90\xd2\x17\x1b\xeb\xf0\xc9\x29\xdb\x54\x19\xe0\x7f\xc1\x03\x0d\xf0\xde\x15\xce\x8d\x94\xdd\x13\x96\x81\x70\x1b\x5d\x16\x78\x7d\xbf\x03\x2e\xb3\xb6\x82\x7d\xb9\x71\xb6\x98\xae\x77\x69\x79\xec\x01\x00\xe0\x7a\xae\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\x99\xb0\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\x33\x14\x73\xa7\xc6\x23\x73\x94\xd9\x5a\x5d\x63\x9e\xaa\x2c\x86\x83\xcd\xaa\x6c\x31\x20\x1e\x7d\xeb\xcf\xff\xef\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\x44\x52\x60\x81\x19\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 281, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x6f\x1b\x37\x10\x3d\x2f\x7f\xc5\x44\xd8\x82\x2b\x45\x8a\xad\x16\x39\x44\x6b\xb9\x08\x8a\x5e\x82\x22\x39\xb4\x87\x02\x49\x30\xa1\x76\x47\x2b\xc6\x14\xb9\x21\x67\x15\x1b\xf0\x8f\x2f\x48\xea\x2b\xb1\x1d\xa0\x39\x68\x49\x0e\xc9\x99\x37\x6f\xf8\x48\xe9\x35\x60\x8b\x70\x0d\x97\xc0\x1b\xb2\xa2\xc0\x1d\xbe\x47\x8b\x1f\x61\xb1\x04\x79\xf5\x6c\x36\x03\xb2\xed\x02\x4a\xab\xb6\x54\xc2\x6c\x76\x2d\x6b\x40\x8b\x71\x3a\x36\xcf\x61\x5e\x3f\xb6\x49\xc2\xfd\x3d\x54\x8d\x71\xcd\x0d\xb2\xde\x52\x60\xb5\xed\xab\x31\xcc\x00\x1b\x1c\xc3\x62\x01\xda\x32\xf9\x9d\x32\x71\xa1\x7c\xca\x71\x84\xc7\x5b\x84\x67\x4b\x90\xef\x3f\xca\xc5\xe2\x73\x70\x76\xb5\x87\x5a\xa4\xa9\xb8\x3e\xb6\xf7\xf7\x90\x26\x71\x35\x68\xd3\xa2\x5b\x7d\xa6\x86\x2b\xf9\x97\xb6\x94\x52\x90\x53\xa8\x1e\x02\x9a\x21\x37\x38\x5e\x2c\x0e\x68\xc6\xe3\x3a\x3a\x7e\x3c\x9f\xec\xbf\xf7\xc4\x7c\x57\xc5\xa0\xe3\x1f\x82\x27\xdb\x82\x5e\xd7\xe2\xd0\x62\x93\x16\x3c\xc0\x50\x0b\x21\xd6\xce\x83\x06\x6d\x61\x0e\x2f\x5e\x24\x1f\xc6\xb9\x3e\x13\xb0\xc3\xf7\xfa\x23\xe8\x00\x76\x30\x26\xe5\x7e\xb0\x45\x78\xb2\x86\xf3\x40\x71\x5b\x2d\x04\x72\x8a\xa5\xbc\x57\x77\xc8\x0e\x03\x7b\x6d\xbb\x0a\x77\x38\x05\x29\x63\xc8\x40\x86\x1a\x06\xdc\xe0\x14\x90\x51\x14\x17\x93\x98\xcc\xff\xac\x9e\x28\x12\x03\x17\x79\x0b\x5a\xfc\xd6\xc0\x5e\x6f\x2b\x76\xd8\x6c\x94\xaf\x0c\xd9\x8e\x37\x15\x32\x8e\xa7\x20\x5f\xbd\x7a\x35\x3d\xfb\xc9\xf1\x19\x99\x93\x0b\xa1\x2d\x3b\x40\x8f\xb5\xf0\xc4\x83\xb7\xb9\x2f\xe8\xb6\xa1\x9e\xb5\xb3\xf0\x35\xf2\xe0\x78\x43\x3e\xec\xcf\x43\x47\x0c\x81\x55\x73\x43\x2d\xb4\x5a\x75\xd6\x05\xd6\x4d\x80\x1d\x92\xf7\xce\x63\x9a\x83\x25\xf4\x1d\x1e\xdd\x60\xe3\x2c\xd3\x2d\xd7\x42\x14\xb8\x49\x9c\x5d\xc6\x7e\x66\xff\x60\x8a\x4d\xae\x69\x41\xb7\x9a\x73\xec\x68\xbc\x86\x5f\xa3\x71\x45\x9d\x8e\x07\xb2\xd0\x36\x90\x67\xc8\xe0\xb1\x77\x9d\xc3\x1c\x3c\xc4\xd9\x2a\x7e\x0a\xdd\x4e\x53\x1b\x89\xc5\xc4\x6c\x1e\x0f\x81\x3c\x1e\x26\xd7\x83\x6d\x12\xbe\xa8\xbb\x6c\xea\x95\x57\xdb\x90\xfb\x46\x5b\x42\x3b\x6c\x57\xe4\xb3\x21\xe5\xb6\xef\x7e\x31\xd1\x2d\xd3\x69\x98\x20\xc4\xd1\x38\x7e\x76\xca\x0c\x74\x06\x68\xdb\xbe\x7c\x58\xeb\xc5\x62\xa7\x7c\x2c\x5b\xaa\xab\xc1\x71\xf6\xd6\x0c\xde\x93\xe5\xd3\xca\x6c\x9e\xe7\x46\x96\x07\xdc\xa5\xcc\x96\x72\xed\xfc\xb6\xcc\x7d\x34\x98\x3b\xdf\x14\xe4\x18\xe8\x08\xf7\x5b\xf0\xe4\xfd\xf6\x08\x3d\x9f\x05\x6d\x3b\xd0\xed\x9e\x65\xf2\x5e\xb7\x18\xab\x90\x6a\xb3\xef\x3c\x75\x4a\x92\x86\x52\x1d\x6d\xbb\x97\xe8\x5e\x31\xc5\x6c\x06\x6f\xdf\xfd\xf3\xe7\x02\xfe\x50\x56\x32\x34\x1b\x65\x3b\x02\xcd\xc0\x0e\xde\xfc\xfd\xee\x2d\x6c\xc8\x13\x04\x6d\x9b\x64\xfd\xaa\x8d\x81\x95\x27\x75\x13\x1d\x83\x75\x16\x5e\xbf\x79\xfd\x2f\x0c\x81\x1a\x15\x48\x14\x7b\x81\xbd\xbc\xbc\x9c\x82\xbc\xea\x3d\x41\x63\x54\x08\xcb\x51\xef\x69\x76\x47\xc6\xb8\xaf\xb3\xc4\xc3\x08\x02\xdf\x19\x5a\x8e\x56\xaa\xb9\xe9\xbc\x1b\x6c\x3b\x6b\x9c\x71\x7e\x91\x57\xd5\x90\x47\xbd\xb6\x37\xf5\xe8\x7a\x32\x99\x40\xda\x07\x1b\x15\xc0\x35\xa9\x24\x2d\x48\x31\x9b\x15\x59\x7c\xda\xc2\xa7\x53\x25\x3e\x41\x3c\x2d\x7b\x81\x1a\x3c\x2d\x4b\x3c\x67\xfb\x89\xe7\x24\x7c\x15\x28\x33\x37\x8f\xbe\xaa\xf9\x38\x73\x27\x63\xe8\x2b\x05\xac\x7c\x47\xbc\x1c\xe1\xca\x28\x7b\x33\x82\x8d\xa7\xf5\x72\x94\x30\xfd\xde\xa3\x6e\x97\x39\x56\xae\x4c\x52\xf5\xe8\xba\x25\x56\xda\x84\xab\x0b\x75\x2d\x81\x4c\x20\x90\x32\x5e\x5c\x63\xb1\x47\x33\x99\x4c\xae\x2e\x7a\x4f\xd7\x52\x88\xe2\xa4\x7e\x51\x9c\xeb\x3f\x55\xad\x2c\x85\x51\xb6\x1b\x54\x47\xd0\x9b\xbe\x0b\x5f\x0c\x94\x3b\x67\x14\x6b\xa3\xf9\x0e\x1b\xc5\xd4\x39\x7f\x57\xd6\x42\x7c\x60\x21\x5a\x32\xc4\x04\x6b\xef\xb6\x47\x51\x32\x05\x8e\x69\x86\x98\xa7\x27\xe8\x55\x47\x49\x6b\xb0\x04\x99\x1f\x3b\x59\x0b\xf1\x98\x9e\x8f\x5b\x0f\x57\x68\xab\x03\x6b\xdb\xf0\x71\xe3\x14\x06\x6b\x29\x70\xe5\xa9\xa3\xdb\x1e\x43\x6f\x34\xc7\x5b\x38\x5d\xc7\x55\x79\xf4\x50\x4e\x41\x4e\x65\x7c\x73\x1e\x05\xd9\x52\x4f\xb6\x25\xdb\xe8\x9f\xc1\x79\xbe\xfb\xa7\xa1\x9e\x3b\x39\x47\xeb\xa0\x2c\xc5\xfe\xda\x7b\x2c\x78\xe3\xb6\xbd\x36\xd4\x62\x70\x83\x6f\x08\xaa\x74\x8f\x81\x51\x31\x77\xdc\x91\x0f\xda\xd9\xb1\xd8\xdf\x45\x50\x9d\xf0\xcc\xe3\x0b\x3c\xf4\x6d\x3c\x9b\x4f\x79\x0b\xc4\xa0\x03\xaa\x81\x37\xb0\x84\x52\x07\xb4\x2e\x0e\xca\x3d\x4b\x0f\x08\xfa\xd1\xb3\xf1\xe3\x58\x51\xc7\xfc\x1d\x6e\x58\x7e\x6f\x78\x0e\x73\x51\x3c\x15\x3b\x9f\xd9\x5a\x88\x8b\x49\xe6\xad\xa5\xc6\x28\x4f\xa2\x60\x88\x6f\x4f\xfa\x53\xb0\xf1\xd5\xfc\xb7\x98\xba\x87\x8c\x23\x1f\x7b\x44\xbe\xeb\xa9\x3e\x50\xed\xe3\xda\x3e\xf4\x98\xbd\x57\x32\xc9\x6d\x7e\xa0\x2d\xb9\xe2\xa8\xb8\xfd\x5b\xeb\x5f\x78\x0a\xbd\xb3\x81\x30\x46\x1a\x2f\x16\x29\xe0\xfd\xfd\x21\xe0\x59\x37\xc6\x56\x3a\x10\x68\xbb\x76\x20\x7f\x91\x53\xe0\x13\xfa\xc9\x85\x10\x65\x4b\xab\xa1\xeb\xc8\x63\xba\xf7\x7a\xa7\x2d\x87\x52\x88\x0f\x5f\xc4\x7f\x01\x00\x00\xff\xff\x80\x5a\xda\x09\x48\x0a\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2632, mode: os.FileMode(438), modTime: time.Unix(1560865526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xcd\x4b\xb1\xe6\x52\x51\xe1\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\x28\xc8\x29\x48\x2f\x2e\xcc\x51\x50\x29\xcb\xcf\x49\x2c\xc9\xcc\xc9\x2c\xa9\x8c\x4f\x4e\x2c\x49\x4d\xcf\x2f\xaa\x54\xb1\xe6\xe2\x8a\x29\xe1\x8a\x29\xe4\x02\x04\x00\x00\xff\xff\x43\xbb\x67\x3e\x38\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 56, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

