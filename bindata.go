// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_routed.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xd1\x8e\xd3\x30\x10\x7c\xbe\x7c\xc5\x3e\x58\x72\x22\x45\x50\x78\xec\x01\x3f\x02\x68\xb5\xb1\xb7\x89\xaf\x89\x1d\xad\x37\x15\xf7\xf7\xc8\x2e\x04\x15\xa8\xae\x2f\xc9\x78\x3c\x99\xd9\x9d\x7c\xd3\xc6\x09\x93\x32\x9c\xb6\xe8\x34\xa4\x08\xe6\x37\x32\xd0\x9a\x95\x84\x16\x56\x96\x6c\xba\x46\x58\x37\x89\x19\xcc\x2f\x60\x80\x32\x18\xd3\x78\x76\x33\x09\x37\x4f\xe8\x10\x34\x2c\x9c\x95\x96\x15\x8e\x9f\xc1\xcd\xc9\x9d\x71\xa7\xda\xee\xb9\x79\x42\x45\x50\xfe\xa1\x05\xce\x08\x21\x2a\x8f\x2c\x45\x7d\x28\xd4\x05\xe1\x42\xe2\x26\x92\xaf\xdf\xcb\x39\xde\x48\x3e\x14\xca\xdf\x50\xc6\xf3\xb0\x8d\xa6\x5e\x64\x84\x97\x9c\xe2\x50\xf8\x0a\x70\xd8\xc2\xec\x31\x0d\x2f\xec\xf4\x1a\xef\x33\x0e\x8f\xe8\x4e\x65\x73\xf4\xbc\xea\xb4\xe7\xd5\xf1\x27\x61\xf2\x18\xfc\x3e\x68\x71\x69\x5d\xa2\x99\xb3\xe3\x36\x6e\xf3\x1c\x4e\xad\xdb\x44\x38\x2a\x66\x56\x0d\x71\x6c\x2d\xe2\x9a\xc6\xf4\x6e\xff\xdc\xf6\xa0\xb2\x71\xd7\x83\xb5\xe5\xf1\x29\xbe\xa7\x2f\xb6\xab\xd9\x2c\xf2\x97\xbf\xb5\x35\xfb\xb1\x82\x97\x3b\xeb\x91\x08\xbd\x5e\x35\xd3\x3f\xcd\x5f\x4a\x6a\x12\xcc\x4a\xee\x5c\xff\xd0\x9f\xdc\x62\x22\x0f\x74\x36\xbc\x2a\x93\x20\xd4\x77\x11\x96\x32\x8e\xc7\x7a\x2c\xf7\xe4\xfd\x1b\x36\x76\x52\x5d\xd1\x25\xcf\xb6\x87\x8f\x87\x43\x0f\x76\x62\xf2\x2c\xd9\xf6\xff\x8d\xed\xc1\xba\x94\xce\x81\xef\x09\xba\xe7\x9f\x01\x00\x00\xff\xff\x7b\x06\x77\x0f\xe5\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 741, mode: os.FileMode(438), modTime: time.Unix(1583929487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xf3\x5e\xc2\x47\xf8\xfe\xff\xff\x34\x97\x95\xc9\x18\xd6\x29\xd9\x6a\x17\xf0\x7f\xe4\x21\xfa\x83\x94\xbe\xd8\x58\x87\x4f\x4e\xd9\xa6\xca\x00\xff\x0b\x1e\x68\x80\xf7\xae\x70\x6e\xa4\xec\x9e\xb0\x0c\x84\xdb\xe8\xb2\xc0\xeb\xfb\x1d\x70\x99\xb5\x15\xec\xcb\x8d\xb3\xc5\x74\xbd\x4b\xcb\x23\xde\x7a\x4e\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\xf9\xb7\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\xb3\x25\xe6\x4e\x8d\x47\xe6\x28\xb3\xb5\xba\xc6\x3c\x55\x59\x0c\x07\x9b\x55\xd9\x62\x40\x3c\xfa\xd6\x9f\xff\xe3\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\xf8\xc6\x18\x60\x16\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 278, mode: os.FileMode(438), modTime: time.Unix(1580730084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xd1\x72\xdb\x2a\x10\x7d\x86\xaf\xd8\x7a\x74\x07\x29\xb5\xdb\xe4\xce\xf4\x45\x8a\x73\x7f\xe0\xfe\x41\x6f\x67\x07\x8b\xb5\x4c\x83\x41\x05\xe4\xc6\x33\xf9\xf8\x3b\x80\xec\xb8\x89\xd3\x87\x3e\xd8\xc0\x02\x7b\xce\xb2\x67\x57\x7a\x0b\xa8\x10\x1e\xe0\x16\xe2\x8e\x2c\x67\x78\xc0\xaf\x68\xf1\x1b\xb4\x6b\x10\xf7\x1f\x56\x2b\x20\xab\x5a\xa8\xb6\x5e\x93\x55\xe6\x88\x56\xee\xa9\x82\xd5\xea\x41\x74\x80\x16\xd3\xb9\x34\x7c\x84\xbb\xee\xda\x6d\x01\xcf\xcf\x50\xf7\xc6\xf5\x8f\x18\xf5\x9e\x42\x94\xfb\xb1\x6e\x60\x05\xd8\x63\x03\x6d\x0b\xda\x46\xf2\x07\x69\xd2\x41\xf1\x9e\xe3\xc4\x33\xee\x11\x3e\xac\x41\x7c\xfd\x26\xda\xf6\x7b\x70\x76\x33\x73\x66\x79\x2b\x9d\x4f\xe3\xf3\x33\xe4\x4d\xdc\x4c\xda\x28\x74\x9b\xef\xd4\xc7\x5a\xfc\xab\x2d\xe5\x58\xc4\x12\xea\xb7\x84\x56\x18\x7b\x6c\xda\xf6\xc4\xa6\x69\xba\xe4\xf8\x7a\x3c\xc5\xff\xe8\x29\xc6\x63\x9d\x40\x9b\xdf\x92\x27\xab\x40\x6f\x3b\x7e\x1a\xb1\xcf\x07\xde\x70\xe8\x38\xe7\x5b\xe7\x41\x83\xb6\x70\x07\x9f\x3e\x65\x1f\xc6\xb9\xb1\x3c\xc0\x01\xbf\xea\x6f\xa0\x03\xd8\xc9\x98\x1c\xfb\xc9\x96\xe8\x89\x0e\x2e\x81\xd2\xb5\x8e\x73\x8c\x19\x4b\x7a\x2f\x8f\x18\x1d\x86\xe8\xb5\x1d\x6a\x3c\xe0\x12\x84\x48\x90\x9e\xe2\xe4\x2d\xd4\xde\xfd\xac\x31\x62\xdb\x46\x7a\x8a\x4b\xce\x18\xc3\x14\xa7\xc7\xf9\xb1\x8b\x69\x73\x8c\x24\x93\x2d\x4f\x8a\x4d\x2a\x75\x3e\x95\x0c\x0d\x67\x2c\x79\xa6\xa7\x9e\xc6\xa8\x9d\x85\x9f\x89\xab\x8b\x3b\xf2\x61\xce\xd9\x40\x11\x42\x94\xfd\x23\x29\x50\x5a\x0e\xd6\x85\xa8\xfb\x00\x07\x24\xef\x9d\xc7\xbc\x07\x6b\x18\x07\x3c\xbb\xc1\xde\xd9\x44\xae\xe3\x9c\xe1\x2e\xc7\x75\x9b\xe6\xe5\x85\x4e\xa6\x34\x94\x77\x67\xf4\xa4\x63\xc1\x4e\xc6\x07\xf8\x3b\x19\x37\x34\xe8\x24\x1a\xa6\x6d\x20\x1f\x93\xfe\x1c\x20\x8e\x6e\x70\x58\xc0\x03\x67\x8c\xb3\x3a\x9d\x61\x5a\xe5\x18\x59\x4a\x13\xe6\x3c\x95\xf5\x14\xc8\xe3\x69\x73\x3b\xd9\x3e\x13\x4c\xc5\x51\x4c\xa3\xf4\x72\x1f\xca\xdc\x68\x4b\x68\xa7\xfd\x86\x7c\x31\xe4\xe0\xe6\xe9\x0f\x93\xdc\x46\x7a\x59\x66\x0e\xa7\x77\x64\x07\x69\x26\x4a\x8c\x66\x42\x7b\xf5\xe5\xad\x7a\xdb\xf6\x20\x7d\xbf\x93\x3e\xe9\x10\x0d\x36\xc5\x5b\x3f\x79\x4f\x36\xbe\x9c\x2c\xe6\xbb\x32\x88\xea\xc4\xbb\x12\xb3\x7e\x8b\xbc\xc5\xab\x6a\x7f\xbd\x5b\x8c\xc5\x49\xb5\x75\x7e\x5f\x95\x39\x1a\x2c\x93\x5f\x92\x78\xe6\x76\x8e\xf0\xd7\x78\xc9\xfb\xfd\x39\xda\x22\x46\x6d\x07\xd0\x6a\xce\x0c\x79\xaf\x15\x76\x79\x57\xea\x40\x60\x5d\xd4\x3d\x81\x08\x3f\x0c\x64\x9c\x16\xfe\x82\x55\xf9\x89\xe5\x1b\xf6\x50\xbf\xc4\xd9\x88\x59\xde\x30\x03\x9f\x96\xaf\x18\x17\x95\xb1\xa2\xa0\x79\xf2\x9e\x96\x73\x35\x66\xb5\x59\x35\x17\xfb\x5c\x7b\xec\xb2\xb4\x72\xb8\x4c\xdc\x8f\x9e\xa0\x37\x32\x84\xf5\x62\xf4\xb4\x3a\x92\x31\xee\xe7\x2a\xa3\x2f\x20\xc4\xa3\xa1\xf5\x62\x23\xfb\xc7\xc1\xbb\xc9\xaa\x55\xef\x8c\xf3\x6d\x39\xd5\x41\x59\x8d\xda\x3e\x76\x8b\x87\x9b\x9b\x9b\x12\x3f\xec\x64\x00\xd7\xe7\x6c\x2b\x10\x05\x89\x31\x96\x3b\xaf\x0c\x54\x28\xdf\xa5\xae\x52\xdf\x35\x85\xb4\x48\xb7\xef\x25\x44\xe9\x07\x8a\xeb\x05\x6e\x8c\xb4\x8f\x0b\xd8\x79\xda\xae\x17\xd9\xed\x3f\x23\x6a\xb5\xce\x39\x9f\x93\x90\xd3\xbf\x78\x50\x14\xa5\x36\xe1\xfe\xb3\x7c\x10\x40\x26\x10\x08\x91\x7a\x4f\x73\x89\x2c\xe0\xe6\xe6\xe6\xfe\xf3\xe8\xe9\x41\x5c\xf4\x14\xc6\xae\x34\xe7\xf3\x3d\x91\xa4\x31\x85\x94\xc5\x4c\x61\x16\x59\xde\x2a\x09\xd2\x4a\x2c\x4f\x74\x4e\x7b\xcd\x65\x87\x62\x2c\xe5\xe3\xb2\x3f\x5d\x85\x14\xbb\x18\x47\xec\x9d\x22\xb1\x84\x2f\xb7\xb7\x85\x7b\xfe\xcf\x7d\x38\x27\xb3\xaa\xb8\x91\x76\x98\xe4\x40\x30\x9a\x71\x48\x8a\xab\x0e\xce\xc8\xa8\x8d\x8e\x47\xec\x65\xa4\xc1\xf9\x63\xd5\x71\xfe\x5f\xe4\x5c\x91\xa1\x48\xb0\xf5\x6e\x7f\xee\x28\x91\x42\x4c\x49\x08\x29\x0b\x9e\x60\x94\x03\x65\x61\xc2\xfa\x5c\x4a\x1d\xe7\xd7\x9a\xd1\xf9\x2a\x0f\x64\xa8\x8f\xa0\x74\x88\xda\xf6\xf1\xa5\x06\x61\xb2\x96\x42\xac\x3d\x0d\xf4\x34\x62\x18\x8d\x8e\xa9\xcd\xe7\x7e\x5f\x57\x67\x0f\xd5\x12\xc4\x52\xa4\x8f\xda\x55\x92\x8a\x46\xb2\x8a\x6c\xaf\xff\x84\xe7\xe5\xed\x3f\xa6\x7a\xe9\xe4\x92\xad\x83\xaa\xe2\x73\xcf\xbe\x06\xde\xbb\xfd\xa8\x0d\x29\x0c\x6e\xf2\x3d\x41\x9d\x7b\x30\x18\x99\x62\xc7\x03\xf9\xa0\x9d\x6d\xf8\xdc\x47\xa1\x7e\xe1\x73\xd7\x74\xbf\xfd\x44\x4d\xa3\x92\x91\xde\x03\xe2\x2c\x50\x7c\x05\x03\xeb\xd7\x86\x8f\x70\xc7\x59\x79\xd0\x37\x6f\x39\x4b\xac\xe3\xfc\xf7\x48\x90\x80\x74\x40\xeb\xe4\x14\x77\xb0\x86\xea\xbc\xa8\xe0\x1d\xdf\x9c\x57\x8a\x36\xd3\x30\x90\xc7\x8d\x27\xf9\x38\x3a\x6d\x63\xa8\xf8\xff\x01\x00\x00\xff\xff\x8f\x22\xed\x6d\xf1\x09\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2545, mode: os.FileMode(420), modTime: time.Unix(1606111541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc0\x20\x0c\x05\xd0\xfb\x9f\xc2\x43\xb6\x70\x95\x82\xc4\x1a\x82\x34\xa8\xd5\x58\x70\xfb\x3e\x48\x2b\x11\x44\x30\x6e\xba\x59\x25\x0c\x1b\xba\x5e\x0b\xf4\x75\x63\xaf\x56\xfd\xa4\x9b\x5d\xb4\xcf\x43\x11\xa0\x22\x79\xab\xca\x4c\x79\x0a\x3f\xa3\xd7\xe6\x8b\x80\xcb\xff\x00\x00\x00\xff\xff\x21\x7e\x2a\x60\x4c\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 76, mode: os.FileMode(438), modTime: time.Unix(1583150005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_routedSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xd1\x72\xdb\x2a\x10\x7d\x86\xaf\xd8\x7a\x74\x07\x39\xb5\xdb\xf8\xce\xf4\x45\x8a\x7d\x7f\xe0\xfe\x41\x6f\x67\x07\x8b\xb5\x4c\x83\x41\x05\xe4\xc6\x33\xf9\xf8\x3b\x80\xec\xb8\x89\xd3\x87\x3e\xd8\xc0\x02\xbb\x67\xd9\xb3\x47\x7a\x07\xa8\x10\x36\x70\x0f\x71\x4f\x96\x33\x3c\xe2\x57\xb4\xf8\x0d\x9a\x35\x88\x87\x0f\xcb\x25\x90\x55\x0d\x54\x3b\xaf\xc9\x2a\x73\x42\x2b\x0f\x54\xc1\x72\xb9\x11\x2d\xa0\xc5\x74\x2e\x0d\x1f\x61\xd5\xde\xba\x2d\xe0\xf9\x19\xea\xce\xb8\xee\x11\xa3\x3e\x50\x88\xf2\x30\xd4\x73\x58\x02\x76\x38\x87\xa6\x01\x6d\x23\xf9\xa3\x34\xe9\xa0\x78\xcf\x71\xc2\x19\x0f\x08\x1f\xd6\x20\xbe\x7e\x13\x4d\xf3\x3d\x38\xbb\x9d\x30\xb3\xbc\x95\xce\xa7\xf1\xf9\x19\xf2\x26\x6e\x47\x6d\x14\xba\xed\x77\xea\x62\x2d\xfe\xd5\x96\x72\x2e\x62\x01\xf5\x5b\x40\x4b\x8c\x1d\xce\x9b\xe6\x8c\x66\x3e\x6f\x93\xe3\xdb\xf9\x14\xff\x83\xa7\x18\x4f\x75\x0a\x3a\xff\x2d\x78\xb2\x0a\xf4\xae\xe5\xe7\x11\xbb\x7c\xe0\x0d\x86\x96\x73\xbe\x73\x1e\x34\x68\x0b\x2b\xf8\xf4\x29\xfb\x30\xce\x0d\xe5\x01\x8e\xf8\x55\x7f\x03\x1d\xc0\x8e\xc6\xe4\xdc\xcf\xb6\x04\x4f\xb4\x70\x1d\x28\x5d\x6b\x39\xc7\x98\x63\x49\xef\xe5\x09\xa3\xc3\x10\xbd\xb6\x7d\x8d\x47\x5c\x80\x10\x29\xa4\xa7\x38\x7a\x0b\xb5\x77\x3f\x6b\x8c\xd8\x34\x91\x9e\xe2\x82\x33\xc6\x30\xe5\xe9\x71\x7a\xec\x62\xda\x9e\x22\xc9\x64\xcb\x93\x62\x93\x4a\x5d\x4e\x25\xc3\x9c\x33\x96\x3c\xd3\x53\x47\x43\xd4\xce\xc2\xcf\x84\xd5\xc5\x3d\xf9\x30\xd5\xac\xa7\x08\x21\xca\xee\x91\x14\x28\x2d\x7b\xeb\x42\xd4\x5d\x80\x23\x92\xf7\xce\x63\xde\x83\x35\x0c\x3d\x5e\xdc\x60\xe7\x6c\x02\xd7\x72\xce\x70\x9f\xf3\xba\x4f\xf3\xf2\x42\x67\x53\x1a\xca\xbb\x33\x7a\xd2\xb1\xc4\x4e\xc6\x0d\xfc\x9d\x8c\x5b\xea\x75\x22\x0d\xd3\x36\x90\x8f\x89\x7f\x0e\x10\x07\xd7\x3b\x2c\xc1\x03\x67\x8c\xb3\x3a\x9d\x61\x5a\xe5\x1c\x59\x2a\x13\xe6\x3a\x95\xf5\x18\xc8\xe3\x79\x73\x37\xda\x2e\x03\x4c\xcd\x51\x4c\x83\xf4\xf2\x10\xca\xdc\x68\x4b\x68\xc7\xc3\x96\x7c\x31\xe4\xe4\xa6\xe9\x0f\x93\xdc\x46\x7a\x59\x66\x0c\xe7\x77\x64\x47\x69\x46\x4a\x88\x26\x40\x07\xf5\xe5\x2d\x7b\x9b\xe6\x28\x7d\xb7\x97\x3e\xf1\x10\x0d\xce\x8b\xb7\x6e\xf4\x9e\x6c\x7c\x39\x59\xcc\xab\x32\x88\xea\x8c\xbb\x12\x13\x7f\x0b\xbd\xc5\xab\x6e\x7f\xbd\x5b\x8c\xc5\x49\xb5\x73\xfe\x50\x95\x39\x1a\x2c\x93\x5f\x8a\x78\xc1\x76\xc9\xf0\xd7\x7c\xc9\xfb\xc3\x25\xdb\x42\x46\x6d\x7b\xd0\x6a\xaa\x0c\x79\xaf\x15\xb6\x79\x57\xea\x40\x60\x5d\xd4\x1d\x81\x08\x3f\x0c\xe4\x38\x0d\xfc\x05\xcb\xf2\x13\x8b\x37\xe8\xa1\x7e\xc9\x73\x2e\x26\x7a\xc3\x14\xf8\xbc\x7c\x85\xb8\xb0\x8c\x15\x06\x4d\x93\xf7\xb8\x9c\xbb\x31\xb3\xcd\xaa\xa9\xd9\xa7\xde\x63\xd7\xad\x95\xd3\x65\xe2\x61\xf0\x04\x9d\x91\x21\xac\x67\x83\xa7\xe5\x89\x8c\x71\x3f\x97\x39\xfa\x0c\x42\x3c\x19\x5a\xcf\xb6\xb2\x7b\xec\xbd\x1b\xad\x5a\x76\xce\x38\xdf\x94\x53\x2d\x94\xd5\xa0\xed\x63\x3b\xdb\xdc\xdd\xdd\x95\xfc\x61\x2f\x03\xb8\x2e\x57\x5b\x81\x28\x91\x18\x63\x59\x79\x65\xa0\x02\x79\x95\x54\xa5\x5e\xcd\x0b\x68\x91\x6e\x3f\x48\x88\xd2\xf7\x14\xd7\x33\xdc\x1a\x69\x1f\x67\xb0\xf7\xb4\x5b\xcf\xb2\xdb\x7f\x06\xd4\x6a\x9d\x6b\x3e\x15\x21\x97\x7f\xb6\x51\x14\xa5\x36\xe1\xe1\xb3\xdc\x08\x20\x13\x08\x84\x48\xda\x33\xbf\x8e\x2c\xe0\xee\xee\xee\xe1\xf3\xe0\x69\x23\xae\x34\x85\xb1\x1b\xe2\x7c\xb9\x27\x12\x35\xc6\x90\xaa\x98\x21\x4c\x24\xcb\x5b\xa5\x40\x5a\x89\xc5\x19\xce\x79\x6f\x7e\xad\x50\x8c\xa5\x7a\x5c\xeb\xd3\xcd\x90\x62\x1f\xe3\x80\x9d\x53\x24\x16\xf0\xe5\xfe\xbe\x60\xcf\xff\x59\x87\x73\x31\xab\x8a\x1b\x69\xfb\x51\xf6\x04\x83\x19\xfa\xc4\xb8\xea\xe8\x8c\x8c\xda\xe8\x78\xc2\x4e\x46\xea\x9d\x3f\x55\x2d\xe7\xff\x45\xce\x15\x19\x8a\x04\x3b\xef\x0e\x17\x45\x89\x14\x62\x2a\x42\x48\x55\xf0\x04\x83\xec\x29\x13\x13\xd6\x97\x56\x6a\x39\xbf\x25\x46\x97\xab\x3c\x90\xa1\x2e\x82\xd2\x21\x6a\xdb\xc5\x97\x1e\x84\xd1\x5a\x0a\xb1\xf6\xd4\xd3\xd3\x80\x61\x30\x3a\x26\x99\xcf\x7a\x5f\x57\x17\x0f\xd5\x02\xc4\x42\xa4\x8f\xda\x4d\x90\x8a\x06\xb2\x8a\x6c\xa7\xff\x04\xe7\xf5\xed\x3f\x86\x7a\xed\xe4\x1a\xad\x83\xaa\xe2\x93\x66\xdf\x0a\xde\xb9\xc3\xa0\x0d\x29\x0c\x6e\xf4\x1d\x41\x9d\x35\x18\x8c\x4c\xb9\xe3\x91\x7c\xd0\xce\x2e\x60\x90\x71\x3f\xe7\x93\x9a\x42\xfd\x82\x6a\xf5\x56\x31\xd2\x67\xf1\x77\xdf\xae\x71\x50\x32\xd2\x7b\x08\x38\x0b\x14\x5f\xc5\x87\xf5\x6b\xc3\x47\x58\x71\x56\x5e\xfa\xcd\x23\x4f\xdc\x6b\x39\xff\x7d\x24\x48\x81\x74\x40\xeb\xe4\x18\xf7\xb0\x86\xea\xb2\xa8\xe0\x1d\xdf\x9c\x57\x8a\xb6\x63\xdf\x93\xc7\xad\x27\xf9\x38\x38\x6d\x63\xa8\xf8\xff\x01\x00\x00\xff\xff\xce\x5d\xb3\x0f\x0a\x0a\x00\x00")

func templatesTemplate_psp_function_end_routedSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_routedSql,
		"templates/template_psp_function_end_routed.sql",
	)
}

func templatesTemplate_psp_function_end_routedSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_routedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_routed.sql", size: 2570, mode: os.FileMode(420), modTime: time.Unix(1606111541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_routed.sql": templatesTemplate_psp_function_end_routedSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_routed.sql": &bintree{templatesTemplate_psp_function_end_routedSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

