// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_routed.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8f\xd3\x30\x10\x85\xcf\x54\xea\x7f\x98\x83\x25\x27\x52\x04\x85\x63\x17\xf8\x23\x80\x46\x13\x7b\xda\x78\x9b\xd8\xd1\x78\x52\xb1\xff\x1e\xd9\x29\x11\x0b\x54\xdb\x4b\xf2\xf2\xfc\x65\x9e\xfd\xfc\x5d\xf7\x3b\x27\x4c\xca\x70\x5a\xa2\xd3\x90\x22\x98\xdf\xca\x40\x63\x66\x12\x9a\x58\x59\xb2\x69\xf7\x3b\x61\x5d\x24\x66\x30\x37\x61\x80\x32\x18\xb3\xdf\x79\x76\x23\x09\xef\x77\xef\xd0\x21\x68\x98\x38\x2b\x4d\x33\x1c\xbf\x80\x1b\x93\xbb\xe0\x66\x35\xed\x53\xa1\x14\x41\xf9\xa7\x56\x3d\x22\x84\xa8\x7c\x66\x29\xfc\xa1\x7a\x57\x84\x2b\x89\x1b\x48\xbe\xfd\xa8\x46\x7c\x05\x7d\xac\x9e\x7f\xe5\x19\xcf\xfd\x72\x36\xeb\x4a\x46\x78\xce\x29\xf6\x65\xa1\x0a\xec\x97\x30\x7a\x4c\xfd\x33\x3b\xbd\x6d\xc2\x67\xec\x1f\x02\x4f\xa5\x04\xf4\x3c\xeb\xb0\x45\xae\xc7\x18\x84\xc9\x63\xf0\xdb\x76\xcb\x9c\xc6\x25\x1a\x39\x3b\x6e\xe2\x32\x8e\xe1\xd4\xb8\x45\x84\xa3\x62\x66\xd5\x10\xcf\x8d\x45\x9c\xd3\x39\xbd\xdf\x7e\xb7\x1d\xa8\x2c\xdc\x76\x60\x6d\x79\x7c\x8e\x1f\xe8\xab\x6d\xd7\x74\x16\xf9\x2b\xc0\xda\x35\xfd\xc1\xae\xa7\x3b\x67\x24\x11\x7a\xb9\x41\xc3\xbf\x97\x70\x2d\xc9\x49\x30\x2b\xb9\x4b\xbd\xae\x3f\xb2\xcb\x1c\x79\xa4\xbb\xfe\x45\x99\x04\xa1\xbe\x0b\x59\x3a\x39\x1e\xeb\x67\x05\xc8\xfb\x37\x06\xd9\x41\x75\x46\x97\x3c\xdb\x0e\x3e\x1d\x0e\x1d\xd8\x81\xc9\xb3\x64\xdb\xfd\x37\xb8\x03\xeb\x52\xba\x04\xbe\x07\xb4\x4f\xbf\x02\x00\x00\xff\xff\xf1\xa2\xc7\x78\xfa\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 762, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\x4b\x6a\xc4\x30\x0c\x40\xd7\x0d\xe4\x0e\x5a\x18\xec\xc0\xd0\xee\xfb\x3b\x49\x41\x28\xb6\x92\x78\x70\xe5\x20\xcb\x3d\x7f\x71\x3b\xed\x7a\x36\xe2\x81\x9e\xf4\x3e\x6c\x9e\xa2\x32\x19\xc3\xd6\x25\x5a\xae\x02\xee\x8f\x1c\x04\x77\x92\xd2\x27\x1b\x6b\x73\xcb\x3c\x29\x5b\x57\x69\xe0\x6e\xe0\x80\x1a\x38\x37\x4f\x89\x63\x21\xe5\x79\x7a\xc0\xd4\x10\xae\xad\xca\x0a\xcf\x6f\xbf\x80\x6b\xcf\x25\x61\x5d\xaf\x1c\x2d\x2c\x2f\x37\x6b\xbd\x4b\xdc\x46\x1f\x13\x9f\x76\x20\x64\x31\xde\x59\x7f\x16\x76\x28\x53\xc2\x9c\x10\xbe\x48\xe3\x41\x3a\xfe\x84\x58\xa9\x70\x8b\x1c\xa4\x97\x92\xb7\x10\xbb\x2a\x8b\x61\x63\xb3\x2c\x7b\xf0\x88\x67\xdd\xeb\xe3\xff\xb9\xbf\x80\x69\xe7\xe5\x02\xde\x8f\xf1\x2a\x4f\xf4\xee\x97\x51\xff\x0e\x00\x00\xff\xff\x98\x06\x26\x87\x1e\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\xe5\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\xe5\x4a\x2e\x4a\x4d\x2c\x49\x85\x28\x41\x48\xf0\x72\x25\x16\xf3\x72\x01\x02\x00\x00\xff\xff\xc3\x89\xe8\x0e\x41\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 65, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\x80\x30\x08\x00\xc0\xbf\x89\x3b\xf0\x20\xa9\x7e\xfd\x76\x18\xa2\x05\x9a\x26\x16\x48\xd5\xfd\x5d\xc0\x97\x0b\x1c\x3b\x20\xc2\x21\xb5\x19\x84\x0c\xf5\xd1\x41\x89\x87\x07\x85\x57\xa7\xe2\x3d\xda\x29\x4c\xfa\x58\xb9\x9b\xdb\x92\xe2\x8a\x8d\xd0\xf6\x2e\x98\xd6\x0c\x62\x0c\x88\x79\x9e\x7e\x50\xfa\xe5\xbc\x01\x00\x00\xff\xff\x65\xe9\x69\x22\x93\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 147, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xe1\x6e\xdb\x38\x0c\xfe\xed\x00\x79\x07\x2e\xf0\x41\x76\x97\x6c\xcd\x01\xfb\xe3\x34\xb9\x17\xb8\x37\xd8\x0d\x84\x22\x31\x8e\x56\x45\xf2\x24\x39\x6b\x80\x3e\xfc\x41\x92\x9d\xb4\x69\xda\x1f\x43\xd1\x48\x22\x25\xf2\x23\xf9\x91\x56\x3b\x40\x89\xb0\x81\x7b\x08\x7b\x32\xd3\x49\x81\x47\xfc\x8e\x06\x7f\x40\xb3\x06\xf6\xf0\x69\xb1\x00\x32\xb2\x81\x72\xe7\x14\x19\xa9\x4f\x68\xf8\x81\x4a\x58\x2c\x36\x6c\x05\x68\x30\xde\x8b\xcb\x67\x58\xae\x6e\x3e\x67\xf0\xfc\x0c\x95\xd0\x56\x3c\x62\x50\x07\xf2\x81\x1f\xba\xaa\x86\x05\xa0\xc0\x1a\x9a\x06\x94\x09\xe4\x8e\x5c\xc7\x8b\xec\x5d\xcb\x11\x6a\x38\x20\x7c\x5a\x03\xfb\xfe\x83\x35\xcd\x4f\x6f\xcd\x76\x84\x5d\x24\x5d\x7c\x11\xd7\xe7\x67\x48\x5a\xdc\xf6\x4a\x4b\xb4\xdb\x9f\x24\x42\xc5\xfe\x55\x86\x52\x38\x6c\x0e\xd5\x5b\x48\x0b\x0c\x02\xeb\xa6\x19\xf1\xd4\xf5\x2a\x59\xbe\x1d\x52\x76\xd0\x39\x0a\xe1\x54\x45\xaf\xf5\xc7\xf8\xc9\x48\x50\xbb\xd5\x74\x72\xde\xa0\x48\x77\xde\xe0\x58\x4d\x27\xf1\x6f\x67\x1d\x28\x50\x06\x96\xf0\xe5\x4b\xb2\xa4\xad\xed\x86\x4c\x1c\xf1\xbb\xfa\x01\xca\x83\xe9\xb5\x4e\x49\x18\x65\x11\x25\x5b\xc1\x2b\x77\xf1\x61\xb2\x8a\x21\xb9\xe4\xce\xf1\x13\x06\x8b\x3e\x38\x65\xda\x0a\x8f\x38\x07\xc6\xb2\x67\x47\xa1\x77\x06\x2a\x67\x7f\x57\x18\xb0\x69\x02\x3d\x85\x79\xcc\x44\x81\x31\x68\x87\x43\xee\x07\xd9\xf6\x14\x88\x47\x61\xda\x0c\x42\x2e\xe5\xf9\x5e\x92\xd4\xf1\x37\x3b\xa0\x27\x41\x5d\x50\xd6\xc0\xef\x88\xdb\x86\x3d\x39\x3f\x16\xb2\xa5\x00\x3e\x70\xf1\x48\x12\xa4\xe2\xad\xb1\x3e\x28\xe1\xe1\x88\xe4\x9c\x75\x98\x74\xb0\x86\xae\xc5\xb3\x1d\x14\xd6\x44\x90\xc9\x7a\x81\xfb\x14\xe3\x7d\x3e\x0d\x39\x1b\xa5\x71\x19\x0a\x52\xd0\x93\x0a\x19\x42\x94\x6e\xe0\xef\x24\xdd\x52\xab\x12\xa3\x0a\x65\x3c\xb9\x10\xe9\x69\x01\xb1\xb3\xad\xc5\x0c\xc2\x47\xf5\x74\x52\x54\xe9\x5a\xa1\x64\x0e\xba\x88\x35\xc4\x54\xc4\x41\xd0\x7b\x72\x78\x56\xef\x7a\x23\x12\xdc\xd8\x42\x83\xac\xe3\x8e\x1f\xfc\x70\xd0\xca\x10\x9a\xfe\xb0\x25\x37\x48\x52\xb4\xe3\xfe\x97\x8e\xc6\x03\xbd\x38\x27\x38\x97\xfc\x16\x47\xae\x7b\x4a\xf0\x46\x70\x07\xf9\xed\x2d\xd3\x9b\xe6\xc8\x9d\xd8\x73\x17\x29\x8b\x1a\xeb\xc1\xa4\xe8\x9d\x23\x13\x2e\x57\x07\xf9\x72\x58\x59\x39\xc6\x50\xb2\x81\xed\xb9\x19\xd8\xd5\x7c\xb8\xd6\x66\xe1\x60\xa5\xdc\x59\x77\x28\x87\x03\x6a\x1c\x76\xaf\x2a\x7c\x46\x78\x09\xf6\x2a\x76\x72\xee\xf0\x22\xf2\xcc\x5a\x65\x5a\x50\x72\x28\x19\x39\xa7\x24\xae\xb2\x9a\x2b\x4f\x60\x6c\x50\x82\x80\xf9\x5f\x1a\x92\xb3\x06\xfe\x82\x45\xfe\x67\xf3\x37\x51\x40\x75\x89\xb7\x66\x43\x23\xc0\xe0\x7b\x3c\x5e\xc1\x1e\x78\x58\x64\x7a\x8d\xbb\xf7\x08\x9f\xda\x37\x93\xd1\xc8\x71\x4a\x9c\xbb\xb5\x78\xd9\x8a\x39\xf0\x82\x3d\x74\x8e\x40\x68\xee\xfd\x7a\xd6\x39\x5a\x9c\x48\x6b\xfb\x7b\x91\x40\xcc\xc0\x87\x93\xa6\xf5\x6c\xcb\xc5\x63\xeb\x6c\x6f\xe4\x42\x58\x6d\x5d\x93\x6f\xad\x20\x9f\x3a\x65\x1e\x57\xb3\xcd\xdd\xdd\x5d\x4e\x03\xec\xb9\x07\x2b\x52\xf9\x25\xb0\xc1\x55\x51\x14\x69\x74\x73\x4f\x19\xf8\x32\x4e\xa3\x6a\x59\x67\xe8\x2c\x3e\x7f\xe0\x10\xb8\x6b\x29\xac\x67\xb8\xd5\xdc\x3c\xce\x60\xef\x68\xb7\x9e\x25\xbb\xff\x74\xa8\xe4\x3a\x71\x60\xa8\x46\xa2\xc3\x6c\x23\x29\x70\xa5\xfd\xc3\x57\xbe\x61\x40\xda\x13\x30\x16\x47\x56\xfd\xca\x35\x83\xbb\xbb\xbb\x87\xaf\x9d\xa3\x0d\x7b\x39\x86\x8a\xe2\xc6\x74\xbf\xbc\x64\x91\x29\xbd\x8f\x05\x4d\x28\x46\xde\x25\x5d\x2e\x96\x92\x6c\x3e\x42\x3a\x2b\xeb\x57\x73\xad\x28\x62\x6d\x5e\x4d\xb5\x9b\x7e\xd9\x3e\x84\x0e\x85\x95\xc4\xe6\xf0\xed\xfe\x7e\x08\x21\x2f\xe3\x2c\xcf\xd5\x2d\xcb\xe9\x44\x73\xd3\xf6\xbc\x25\xe8\x74\xd7\x46\x1e\x96\x47\xab\x79\x50\x5a\x85\x13\x0a\x1e\xa8\xb5\xee\x54\xa6\x67\xff\x85\xf8\x2b\x49\x53\x20\xd8\x39\x7b\x38\x4f\xa1\x40\x3e\xc4\xb2\xf8\x58\x17\x47\xd0\xf1\x96\x12\x65\x61\x7d\x6e\xb6\x64\xe2\xd6\x08\x3b\x3f\x9e\x4e\x3c\x69\x12\x01\xa4\xf2\x41\x19\x11\x2e\x8d\x0a\xbd\x31\xe4\x43\xe5\xa8\xa5\xa7\x0e\x7d\xa7\x55\x88\xdf\x8b\xf4\xe1\xa8\xca\xb3\x89\x72\x0e\x6c\xce\xea\x1c\xe6\x2d\xa4\x92\x3a\x32\x92\x8c\x50\x7f\x06\xf6\xe5\xfb\x3f\xc7\xfb\xd2\xca\x6b\xc8\x16\x62\x51\xc6\x99\x7f\x0b\x81\xb0\x87\x4e\x69\x92\xe8\x6d\xef\x04\x41\x95\xa6\x37\x68\x1e\x93\x80\x47\x72\x5e\x59\x13\xab\x9d\x67\x2f\x54\x17\x50\xcb\xe8\xe4\xc3\xaf\x5d\xdf\x49\x1e\xe8\x3d\x5f\xd3\x49\xe1\x29\x5c\xb9\x82\xf5\xb5\xe0\x33\x2c\xa7\x93\x22\x27\xf7\x6d\x5e\x47\xea\xa5\x78\x3f\xf6\x07\xd1\x9b\xf2\x68\x2c\xef\xc3\x1e\xd6\x50\x9e\x0f\x25\xbc\x67\x3f\xfe\x95\x92\xb6\x7d\xdb\x92\xc3\xad\x23\xfe\xd8\x59\x65\x82\x2f\xa7\x93\xff\x03\x00\x00\xff\xff\x3f\x34\x29\x75\x5f\x0a\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2655, mode: os.FileMode(438), modTime: time.Unix(1605839594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc9\xc1\x09\xc5\x20\x0c\x00\xd0\x7b\x20\x3b\x78\xc8\x16\xae\xf2\x41\xe2\x37\x04\x69\x50\xab\xb1\xe0\xf6\xa5\xe7\x87\x20\xad\x44\x04\x22\x04\xe3\xa6\x9b\x55\xc2\xb0\xa1\xeb\xb6\x40\x4f\x37\xf6\x6a\xd5\x4f\xfa\xb3\x8b\xf6\x79\x28\x22\x20\x50\x91\xbc\x55\x65\xa6\x3c\x85\xaf\xd1\x6b\xf3\x45\x9f\xfc\xfc\x0d\x00\x00\xff\xff\x13\x61\xe3\x7b\x53\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 83, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_routedSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xe1\x6e\xdb\x38\x0c\xfe\xed\x00\x79\x07\x2e\xf0\x41\x76\x97\x6c\xcd\x01\xfb\xe3\x34\xb9\x17\xb8\x37\xd8\x0d\x84\x22\x31\x8e\x56\x45\xf2\x24\x39\x6b\x80\x3e\xfc\x41\x92\x9d\xb4\x4d\xda\x1f\x43\x10\x4b\x22\x25\xf2\x23\xf9\x89\x52\x3b\x40\x89\xb0\x81\x7b\x08\x7b\x32\xd3\x49\x81\x47\xfc\x8e\x06\x7f\x40\xb3\x06\xf6\xf0\x69\xb1\x00\x32\xb2\x81\x72\xe7\x14\x19\xa9\x4f\x68\xf8\x81\x4a\x58\x2c\x36\x6c\x05\x68\x30\xee\x8b\xc3\x67\x58\xae\x6e\x1e\x67\xf0\xfc\x0c\x95\xd0\x56\x3c\x62\x50\x07\xf2\x81\x1f\xba\xaa\x86\x05\xa0\xc0\x1a\x9a\x06\x94\x09\xe4\x8e\x5c\xc7\x8d\xec\x5d\xcb\x11\x6a\x38\x20\x7c\x5a\x03\xfb\xfe\x83\x35\xcd\x4f\x6f\xcd\x76\x84\x5d\x24\x5d\x3c\x11\xc7\xe7\x67\x48\x5a\xdc\xf6\x4a\x4b\xb4\xdb\x9f\x24\x42\xc5\xfe\x55\x86\x52\x38\x6c\x0e\xd5\x35\xa4\x05\x06\x81\x75\xd3\x8c\x78\xea\x7a\x95\x2c\xdf\x0e\x29\x3b\xe8\x1c\x85\x70\xaa\xa2\xd7\xfa\x63\xfc\x64\x24\xa8\xdd\x6a\x3a\x39\x4f\x50\xa4\x3d\x57\x38\x56\xd3\x49\xfc\xed\xac\x03\x05\xca\xc0\x12\xbe\x7c\x49\x96\xb4\xb5\xdd\x90\x89\x23\x7e\x57\x3f\x40\x79\x30\xbd\xd6\x29\x09\xa3\x2c\xa2\x64\x2b\x78\xe5\x2e\x1e\x4c\x56\x31\x24\x97\xdc\x39\x7e\xc2\x60\xd1\x07\xa7\x4c\x5b\xe1\x11\xe7\xc0\x58\xf6\xec\x28\xf4\xce\x40\xe5\xec\xef\x0a\x03\x36\x4d\xa0\xa7\x30\x8f\x99\x28\x30\x06\xed\x70\xc8\xfd\x20\xdb\x9e\x02\xf1\x28\x4c\x93\x41\xc8\xa5\x3c\xef\x4b\x92\x3a\x7e\xb3\x03\x7a\x12\xd4\x05\x65\x0d\xfc\x8e\xb8\x6d\xd8\x93\xf3\x63\x21\x5b\x0a\xe0\x03\x17\x8f\x24\x41\x2a\xde\x1a\xeb\x83\x12\x1e\x8e\x48\xce\x59\x87\x49\x07\x6b\xe8\x5a\x3c\xdb\x41\x61\x4d\x04\x99\xac\x17\xb8\x4f\x31\xde\xe7\xd5\x90\xb3\x51\x1a\x87\xa1\x20\x05\x3d\xa9\x90\x21\x44\xe9\x06\xfe\x4e\xd2\x2d\xb5\x2a\x31\xaa\x50\xc6\x93\x0b\x91\x9e\x16\x10\x3b\xdb\x5a\xcc\x20\x7c\x54\x4f\x27\x45\x95\xb6\x15\x4a\xe6\xa0\x8b\x58\x43\x4c\x45\x1c\x04\xbd\x27\x87\x67\xf5\xae\x37\x22\xc1\x8d\x57\x68\x90\x75\xdc\xf1\x83\x1f\x16\x5a\x19\x42\xd3\x1f\xb6\xe4\x06\x49\x8a\x76\x9c\xff\xd2\xd1\x78\xa0\x17\xeb\x04\xe7\x92\xdf\xe2\xc8\x75\x4f\x09\xde\x08\xee\x20\xbf\x5d\x33\xbd\x69\x8e\xdc\x89\x3d\x77\x91\xb2\xa8\xb1\x1e\x4c\x8a\xde\x39\x32\xe1\xb2\x75\x90\x2f\x87\x91\x95\x63\x0c\x25\x1b\xd8\x9e\x2f\x03\x7b\xd3\x1f\xde\x6a\xb3\x70\xb0\x52\xee\xac\x3b\x94\xc3\x02\x35\x0e\xb3\x57\x15\x3e\x23\xbc\x04\xfb\x26\x76\x72\xee\xf0\x22\xf2\xcc\x5a\x65\x5a\x50\x72\x28\x19\x39\xa7\x24\xae\xb2\x9a\x2b\x4f\x60\x6c\x50\x82\x80\xf9\x5f\x1a\x92\xb3\x06\xfe\x82\x45\xfe\xb3\xf9\x55\x14\x50\x5d\xe2\xad\xd9\x70\x11\x60\xf0\x3d\x2e\xdf\xc0\x1e\x78\x58\x64\x7a\x8d\xb3\xf7\x08\x9f\xae\x6f\x26\xa3\x91\x63\x97\x38\xdf\xd6\xe2\xe5\x55\xcc\x81\x17\xec\xa1\x73\x04\x42\x73\xef\xd7\xb3\xce\xd1\xe2\x44\x5a\xdb\xdf\x8b\x04\x62\x06\x3e\x9c\x34\xad\x67\x5b\x2e\x1e\x5b\x67\x7b\x23\x17\xc2\x6a\xeb\x9a\xbc\x6b\x05\x79\xd5\x29\xf3\xb8\x9a\x6d\xee\xee\xee\x72\x1a\x60\xcf\x3d\x58\x91\xca\x2f\x81\x0d\xae\x8a\xa2\x48\xad\x9b\x7b\xca\xc0\x97\xb1\x1b\x55\xcb\x3a\x43\x67\xf1\xf8\x03\x87\xc0\x5d\x4b\x61\x3d\xc3\xad\xe6\xe6\x71\x06\x7b\x47\xbb\xf5\x2c\xd9\xfd\xa7\x43\x25\xd7\x89\x03\x43\x35\x12\x1d\x66\x1b\x49\x81\x2b\xed\x1f\xbe\xf2\x0d\x03\xd2\x9e\x80\xb1\xd8\xb2\xea\x57\xae\x19\xdc\xdd\xdd\x3d\x7c\xed\x1c\x6d\xd8\xcb\x36\x54\x14\x37\xba\xfb\xe5\x24\x8b\x4c\xe9\x7d\x2c\x68\x42\x31\xf2\x2e\xe9\x72\xb1\x94\x64\xf3\x11\xd2\x59\x59\xbf\xea\x6b\x45\x11\x6b\xf3\xaa\xab\xdd\xf4\xcb\xf6\x21\x74\x28\xac\x24\x36\x87\x6f\xf7\xf7\x43\x08\x79\x18\x7b\x79\xae\x6e\x59\x4e\x27\x9a\x9b\xb6\xe7\x2d\x41\xa7\xbb\x36\xf2\xb0\x3c\x5a\xcd\x83\xd2\x2a\x9c\x50\xf0\x40\xad\x75\xa7\x32\x1d\xfb\x2f\xc4\xaf\x24\x4d\x81\x60\xe7\xec\xe1\xdc\x85\x02\xf9\x10\xcb\xe2\x63\x5d\x1c\x41\xc7\x5b\x4a\x94\x85\xf5\xf9\xb2\x25\x13\xb7\x5a\xd8\xf9\xf0\x74\xe2\x49\x93\x08\x20\x95\x0f\xca\x88\x70\xb9\xa8\xd0\x1b\x43\x3e\x54\x8e\x5a\x7a\xea\xd0\x77\x5a\x85\xf8\x5e\xa4\x87\xa3\x2a\xcf\x26\xca\x39\xb0\x39\xab\x73\x98\xb7\x90\x4a\xea\xc8\x48\x32\x42\xfd\x19\xd8\x97\xe7\xff\x1c\xef\x4b\x2b\xaf\x21\x5b\x88\x45\x19\x7b\xfe\x2d\x04\xc2\x1e\x3a\xa5\x49\xa2\xb7\xbd\x13\x04\x55\xea\xde\xa0\x79\x4c\x02\x1e\xc9\x79\x65\xcd\x1c\x3a\x1e\xf6\xb1\xe6\xb9\x03\x43\x75\x81\xb6\xbc\x6e\x2c\xe9\xa5\xfd\xf0\x19\xec\x3b\xc9\x03\xbd\x07\x62\x3a\x29\x3c\x85\x37\x18\x60\xfd\x56\xf0\x19\x96\xd3\x49\x91\xb3\x7e\x9d\xf0\x91\x93\x29\x11\x1f\xfb\x83\xe8\x4d\x79\x34\x96\xf7\x61\x0f\x6b\x28\xcf\x8b\x12\xde\xb3\x1f\x7f\xa5\xa4\x6d\xdf\xb6\xe4\x70\xeb\x88\x3f\x76\x56\x99\xe0\xcb\xe9\xe4\xff\x00\x00\x00\xff\xff\x62\x02\x01\xaa\x78\x0a\x00\x00")

func templatesTemplate_psp_function_end_routedSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_routedSql,
		"templates/template_psp_function_end_routed.sql",
	)
}

func templatesTemplate_psp_function_end_routedSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_routedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_routed.sql", size: 2680, mode: os.FileMode(438), modTime: time.Unix(1605851637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\xe2\xe5\x02\x04\x00\x00\xff\xff\x44\x15\xc2\x8b\x04\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 4, mode: os.FileMode(438), modTime: time.Unix(1605772274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_routed.sql": templatesTemplate_psp_function_end_routedSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_routed.sql": &bintree{templatesTemplate_psp_function_end_routedSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

