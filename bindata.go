// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xd1\x8e\xd3\x30\x10\x7c\xbe\x7c\xc5\x3e\x58\x72\x22\x45\x50\x78\xec\x01\x3f\x02\x68\xb5\xb1\xb7\x89\xaf\x89\x1d\xad\x37\x15\xf7\xf7\xc8\x2e\x04\x15\xa8\xae\x2f\xc9\x78\x76\x32\xe3\x9d\x7c\xd3\xc6\x09\x93\x32\x9c\xb6\xe8\x34\xa4\x08\xe6\x37\x32\xd0\x9a\x95\x84\x16\x56\x96\x6c\xba\x46\x58\x37\x89\x19\xcc\x2f\x60\x80\x32\x18\xd3\x78\x76\x33\x09\x37\x4f\xe8\x10\x34\x2c\x9c\x95\x96\x15\x8e\x9f\xc1\xcd\xc9\x9d\x71\xa7\xda\xee\xb9\x79\x42\x45\x50\xfe\xa1\x05\xce\x08\x21\x2a\x8f\x2c\x45\x7d\x28\xd4\x05\xe1\x42\xe2\x26\x92\xaf\xdf\xcb\x39\xde\x48\x3e\x14\xca\xdf\x50\xc6\xf3\xb0\x8d\xa6\x0e\x32\xc2\x4b\x4e\x71\x28\x7c\x05\x38\x6c\x61\xf6\x98\x86\x17\x76\x7a\x8d\xf7\x19\x87\x47\x74\xa7\xb2\x39\x7a\x5e\x75\xda\xf3\xea\xf5\x27\x61\xf2\x18\xfc\x7e\xd1\xe2\xd2\xba\x44\x33\x67\xc7\x6d\xdc\xe6\x39\x9c\x5a\xb7\x89\x70\x54\xcc\xac\x1a\xe2\xd8\x5a\xc4\x35\x8d\xe9\xdd\xfe\xb9\xed\x41\x65\xe3\xae\x07\x6b\xcb\xe3\x53\x7c\x4f\x5f\x6c\x57\xb3\x59\xe4\x2f\x7f\x6b\x6b\xf6\x63\x05\x2f\x77\xd6\x23\x11\x7a\xbd\x6a\xa6\x7f\x9a\xbf\x94\xd4\x24\x98\x95\xdc\xb9\xfe\xa1\x3f\xb9\xc5\x44\x1e\xe8\x6c\x78\x55\x26\x41\xa8\xef\x22\x2c\x65\x1c\x8f\xf5\x58\xe6\xe4\xfd\x1b\x36\x76\x52\x5d\xd1\x25\xcf\xb6\x87\x8f\x87\x43\x0f\x76\x62\xf2\x2c\xd9\xf6\xff\xdb\xa5\x07\xeb\x52\x3a\x07\xbe\x33\xef\x9e\x7f\x06\x00\x00\xff\xff\x38\xd0\xbc\xf1\xe3\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 739, mode: os.FileMode(436), modTime: time.Unix(1563709998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xf3\x5e\xc2\x47\xf8\xfe\xff\xff\x34\x97\x95\xc9\x18\xd6\x29\xd9\x6a\x17\xf0\x7f\xe4\x21\xfa\x83\x94\xbe\xd8\x58\x87\x4f\x4e\xd9\xa6\xca\x00\xff\x0b\x1e\x68\x80\xf7\xae\x70\x6e\xa4\xec\x9e\xb0\x0c\x84\xdb\xe8\xb2\xc0\xeb\xfb\x1d\x70\x99\xb5\x15\xec\xcb\x8d\xb3\xc5\x74\xbd\x4b\xcb\x23\xde\x7a\x4e\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\xf9\xb7\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\xb3\x25\xe6\x4e\x8d\x47\xe6\x28\xb3\xb5\xba\xc6\x3c\x55\x59\x0c\x07\x9b\x55\xd9\x62\x40\x3c\xfa\xd6\x9f\xff\xe3\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\xf8\xc6\x18\x60\x16\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 278, mode: os.FileMode(436), modTime: time.Unix(1561987719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdf\x8e\xda\xbc\x12\xbf\xb6\x9f\x62\x3e\x14\xc9\xc9\x16\xda\xe5\x48\xbd\x49\x16\xce\x0b\x9c\x37\xe8\xa9\x46\x26\x1e\x82\xbb\xc6\x4e\x6d\x87\x2e\xd2\x3e\xfc\x27\xdb\x81\xd2\x2e\xdb\x8b\xde\x60\x67\x3c\x33\xbf\xdf\xfc\x45\xef\x01\x15\xc2\x16\x1e\x21\x1e\xc8\x72\x86\x27\xfc\x82\x16\xbf\x42\xbb\x01\xf1\xf4\xcf\x6a\x05\x64\x55\x0b\x95\x95\x47\xaa\x60\xb5\xda\x8a\x0e\xd0\x62\x7a\x4e\xc7\x07\x58\x77\xf7\x8c\x04\xbc\xbe\x42\xdd\x1b\xd7\x3f\x63\xd4\x47\x0a\x51\x1e\xc7\xba\x81\x15\x60\x8f\x0d\xb4\x2d\x68\x1b\xc9\x9f\xa4\x49\x8a\xe2\x3d\xc7\x89\x5e\x3c\x22\xfc\xb3\x01\xf1\xe5\xab\x68\xdb\x6f\xc1\xd9\xdd\x4c\x95\xe5\xa7\xa4\x9f\xce\xd7\x57\xc8\x8f\xb8\x9b\xb4\x51\xe8\x76\xdf\xa8\x8f\xb5\xf8\x9f\xb6\x94\x43\x10\x4b\xa8\xdf\x12\x5a\x61\xec\xb1\x69\xdb\x0b\x9b\xa6\xe9\x92\xe3\xfb\xf1\x14\xff\xa3\xa7\x18\xcf\x75\x02\x6d\xfe\x48\x9e\xac\x02\xbd\xef\xf8\xe5\xc4\x3e\x2b\xbc\xe1\xd0\x71\xce\xf7\xce\x83\x06\x6d\x61\x0d\x1f\x3f\x66\x1f\xc6\xb9\xb1\x24\xe0\x84\x5f\xf4\x57\xd0\x01\xec\x64\x4c\x8e\xfd\x22\x4b\xf4\x44\x07\xb7\x40\xc9\xac\xe3\x1c\x63\xc6\x92\xde\xcb\x33\x46\x87\x21\x7a\x6d\x87\x1a\x4f\xb8\x04\x21\x12\xa4\xa7\x38\x79\x0b\xb5\x77\x3f\x6a\x8c\xd8\xb6\x91\x5e\xe2\x92\x33\xc6\x30\xc5\xe9\x71\x4e\x76\x11\xed\xce\x91\x64\x92\xe5\x4b\x91\x49\xa5\xae\x5a\x49\xd0\x70\xc6\x92\x67\x7a\xe9\x69\x8c\xda\x59\xf8\x91\xb8\xba\x78\x20\x1f\xe6\x9a\x0d\x14\x21\x44\xd9\x3f\x93\x02\xa5\xe5\x60\x5d\x88\xba\x0f\x70\x42\xf2\xde\x79\xcc\x6f\xb0\x81\x71\xc0\xab\x1b\xec\x9d\x4d\xe4\x3a\xce\x19\x1e\x72\x5c\x8f\xe9\x5e\x32\x74\x11\xa5\xa3\xe4\x9d\xd1\x8b\x8e\x05\x3b\x09\xb7\xf0\x9f\x24\xdc\xd1\xa0\x53\xd3\x30\x6d\x03\xf9\x98\xfa\xcf\x01\xe2\xe8\x06\x87\x05\x3c\x70\xc6\x38\xab\x93\x0e\xd3\x2a\xc7\xc8\x52\x99\x30\xd7\xa9\x7c\x4f\x81\x3c\x5e\x1e\xf7\x93\xed\x33\xc1\x34\x1c\x45\x34\x4a\x2f\x8f\xa1\xdc\x8d\xb6\x84\x76\x3a\xee\xc8\x17\x41\x0e\x6e\xbe\x7e\x37\xc9\x6d\xa4\x9f\x9f\x99\xc3\x25\x8f\xec\x24\xcd\x44\x89\xd1\x4c\xe8\xa8\x3e\xbf\xed\xde\xb6\x3d\x49\xdf\x1f\xa4\x4f\x7d\x88\x06\x9b\xe2\xad\x9f\xbc\x27\x1b\x7f\x6a\x16\xf1\xba\x1c\xa2\xba\xf0\xae\x44\x91\x54\x7b\xe7\x8f\x55\xb9\xa3\xc1\x72\xf9\xa5\x22\x57\xa0\x2b\xdd\x5f\xc9\x93\xf7\xc7\x2b\xf5\xd2\x59\xda\x0e\xa0\xd5\x9c\x66\xf2\x5e\x2b\x4c\x65\xc8\xc5\x99\x2f\xef\xb5\x49\x6e\xf4\x5c\x48\xab\xe6\x39\x9a\xdb\x9a\xdd\x76\x6d\x06\x67\xe2\x69\xf4\x04\xbd\x91\x21\x6c\x16\xa3\xa7\xd5\x99\x8c\x71\x3f\x56\x99\xfd\x02\x42\x3c\x1b\xda\x2c\x76\xb2\x7f\x1e\xbc\x9b\xac\x5a\xf5\xce\x38\xdf\x16\xad\x0e\xca\xd7\xa8\xed\x73\xb7\xd8\x3e\x3c\x3c\x40\xb6\x83\x83\x0c\xe0\xfa\x9c\x48\x05\xa2\x20\x31\xc6\xf2\x52\x93\x81\x0a\xe5\x75\x1a\xd8\x7a\xdd\x14\xd2\x22\x59\x3f\x49\x88\xd2\x0f\x14\x37\x0b\xdc\x19\x69\x9f\x17\x70\xf0\xb4\xdf\x2c\xb2\xdb\xff\x8e\xa8\xd5\x26\xef\x92\x39\x25\x79\x81\x2c\xb6\x8a\xa2\xd4\x26\x3c\x7d\x92\x5b\x01\x64\x02\x81\x10\x69\xac\x9b\x5b\x64\x01\x0f\x0f\x0f\x4f\x9f\x46\x4f\x5b\x71\x33\xae\x8c\xdd\xd9\x7b\x57\x3b\x91\x0a\x35\x05\xb1\x04\x91\x29\xcc\x25\xcf\x4f\xa5\xc0\x5a\x89\xe5\x85\xce\xe5\xad\xb9\x1d\x7e\xc6\x52\x3d\x6e\x47\xff\x2e\xa4\x38\xc4\x38\x62\xef\x14\x89\x25\x7c\x7e\x7c\x2c\xdc\xf3\x6f\x5e\x71\xb9\x98\x55\xc5\x8d\xb4\xc3\x24\x07\x82\xd1\x8c\x43\xf8\x6e\xa0\x3a\x39\x23\xa3\x36\x3a\x9e\xb1\x97\x91\x06\xe7\xcf\x55\xc7\xf9\xff\x23\xe7\x8a\x0c\x45\x82\xbd\x77\xc7\xeb\xb0\x46\x0a\x31\x15\x21\xa4\x2a\x78\x82\x51\x0e\x94\x47\x10\x36\x20\xca\x1f\x95\xe8\x38\xbf\x37\xe7\x57\x53\x1e\xc8\x50\x1f\x41\xe9\x10\xb5\xed\xe3\xd5\x70\x09\x93\xb5\x14\x62\xed\x69\xa0\x97\x11\xc3\x68\x74\x4c\x1b\x34\xaf\xd2\xba\xba\x7a\xa8\x96\x20\x96\x22\xfd\x5f\xdc\x25\xa9\x68\x24\xab\xc8\xf6\xfa\x6f\x78\xde\x5a\xff\x35\xd5\x5b\x27\xb7\x6c\x1d\x54\x15\x9f\xd7\xe1\x3d\xf0\xde\x1d\x47\x6d\x48\x61\x70\x93\xef\x09\xea\xbc\xde\xc0\xc8\x14\x3b\x9e\xc8\x07\xed\x6c\xc3\xe7\x15\x05\xf5\x4f\x3e\xeb\xa6\xfb\xe3\xf6\x9f\x46\x25\x23\xbd\x07\xc4\x59\xa0\xf8\x1b\x0c\x6c\x7e\x17\x7c\x80\x35\x67\x25\xa1\x6f\x72\x39\xb7\x58\xc7\xf9\x9f\x91\x20\x01\xe9\x80\xd6\xc9\x29\x1e\x60\x03\xd5\xf5\xa3\x82\x77\x7c\x73\x5e\x29\xda\x4d\xc3\x40\x1e\x77\x9e\xe4\xf3\xe8\xb4\x8d\xa1\xe2\xff\x06\x00\x00\xff\xff\xaf\xd6\x2e\x1e\x43\x09\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2371, mode: os.FileMode(436), modTime: time.Unix(1563708125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xcd\x4b\xb1\xe6\x52\x51\xe1\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\x28\xc8\x29\x48\x2f\x2e\xcc\x51\x50\x29\xcb\xcf\x49\x2c\xc9\xcc\xc9\x2c\xa9\x8c\x4f\x4e\x2c\x49\x4d\xcf\x2f\xaa\x54\xb1\xe6\xe2\x8a\x29\x01\x04\x00\x00\xff\xff\xe5\xcd\x1c\xfa\x34\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 52, mode: os.FileMode(436), modTime: time.Unix(1562250843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

