// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x8e\xdb\x30\x0c\x3c\xaf\xbf\x82\x30\x04\xc8\x06\x16\xdd\xf6\xea\x3e\x7e\x64\xbb\x20\x64\x89\xb1\xb5\x91\x25\x83\xa2\x83\x02\x41\xfe\xbd\x90\xda\x3a\x49\xf7\x92\x8b\x31\x1c\x8d\x38\x43\x5a\x3f\xa5\xb1\x4c\x46\x08\x0e\x5b\xb4\xe2\x53\x04\xf5\x0f\x29\xe8\xd4\x6a\xd8\x2c\x24\xc4\x59\xf5\x0d\x93\x6c\x1c\x33\xa8\xbf\x40\x81\xc9\xa0\x54\xe3\xc8\x06\xc3\xd4\x3c\xa1\x45\x10\xbf\x50\x16\xb3\xac\x30\x7c\x07\x1b\x92\x3d\xe2\x4e\x75\xfd\xd7\xe6\x09\x05\x41\xe8\x97\x14\x18\x10\x7c\x14\x9a\x88\x8b\xfa\x73\xa1\x4e\x08\x27\xc3\x76\x36\xfc\xfa\x56\xea\x78\x27\xf9\x52\x28\x77\x47\x29\x47\xe3\x36\xa9\x7a\x90\x11\xde\x73\x8a\x63\xe1\x2b\xc0\x71\xf3\xc1\x61\x1a\xdf\xc9\xca\x1f\x7b\x97\x71\x7c\x44\x77\x28\x93\xa3\xa3\x55\xe6\xdd\xaf\xc6\x9f\x99\x8c\x43\xef\xf6\xa0\xa5\x4b\x67\x93\x09\x94\x2d\x75\x71\x0b\xc1\x1f\x3a\xbb\x31\x53\x14\xcc\x24\xe2\xe3\xd4\x69\xc4\x35\x4d\xe9\xd3\x7e\x5d\x3f\x83\xf0\x46\xfd\x33\x68\x5d\x3e\xdf\xe2\x8b\xf9\xa1\xfb\xea\x4d\xcc\xff\xf5\xd7\xba\x7a\x3f\xb6\xe0\xe5\x66\x3c\xfd\xfa\xa6\x87\xa1\x96\xe5\x6c\xfe\xb8\x71\xbe\x55\x9f\x2f\x37\xea\x53\x09\x92\x18\xb3\x18\x7b\xac\x3f\xed\x1a\xa5\x68\xee\x6f\xb6\x66\x5d\x83\xb7\xa6\xbc\x9d\x97\xc2\xb7\x03\x9c\x5b\xa6\xbc\xa6\x98\xa9\x16\x36\x45\xa1\x28\xed\x00\x65\x4b\x97\xcb\xd5\xec\x77\x00\x00\x00\xff\xff\x9a\xb8\xfb\x65\x89\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 649, mode: os.FileMode(436), modTime: time.Unix(1562165830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xf3\x5e\xc2\x47\xf8\xfe\xff\xff\x34\x97\x95\xc9\x18\xd6\x29\xd9\x6a\x17\xf0\x7f\xe4\x21\xfa\x83\x94\xbe\xd8\x58\x87\x4f\x4e\xd9\xa6\xca\x00\xff\x0b\x1e\x68\x80\xf7\xae\x70\x6e\xa4\xec\x9e\xb0\x0c\x84\xdb\xe8\xb2\xc0\xeb\xfb\x1d\x70\x99\xb5\x15\xec\xcb\x8d\xb3\xc5\x74\xbd\x4b\xcb\x23\xde\x7a\x4e\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\xf9\xb7\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\xb3\x25\xe6\x4e\x8d\x47\xe6\x28\xb3\xb5\xba\xc6\x3c\x55\x59\x0c\x07\x9b\x55\xd9\x62\x40\x3c\xfa\xd6\x9f\xff\xe3\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\xf8\xc6\x18\x60\x16\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 278, mode: os.FileMode(436), modTime: time.Unix(1561987719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x6e\xdb\x3a\x0f\xbf\xb6\x9e\x82\x0b\x0c\x28\xee\x92\xb5\x19\xb0\x9b\xb8\xc9\xf7\x02\xdf\x1b\x6c\x03\xa1\xd8\x8c\xa3\x55\x91\x3c\x89\x4e\x1b\xa0\x0f\x7f\x20\xc9\x49\xd3\xb5\xe9\x01\x86\x73\x25\x8a\x14\xc9\x1f\xff\x4a\x6f\x01\x5b\x84\x35\xdc\x01\xef\xc8\x8a\x02\x0f\xf8\x1d\x2d\xfe\x84\xe5\x0a\xe4\xfd\xa7\xf9\x1c\xc8\xb6\x4b\x28\xad\xda\x53\x09\xf3\xf9\x5a\xd6\x80\x16\xa3\x38\x1e\x9f\x61\x51\xbf\xa7\x24\xe1\xf9\x19\xa6\x8d\x71\xcd\x03\xb2\xde\x53\x60\xb5\xef\xa7\x15\xcc\x01\x1b\xac\x60\xb9\x04\x6d\x99\xfc\x41\x99\xf8\x50\x5e\x33\x1c\xe1\xf1\x1e\xe1\xd3\x0a\xe4\xf7\x9f\x72\xb9\xfc\x15\x9c\xdd\x8c\x50\x8b\x24\x8a\xef\xe3\xf9\xfc\x0c\x49\x88\x9b\x41\x9b\x16\xdd\xe6\x17\x35\x3c\x95\xff\xd7\x96\x52\x08\x72\x06\xd3\xb7\x80\xe6\xc8\x0d\x56\xcb\xe5\x09\x4d\x55\xd5\xd1\xf0\xfb\xf1\x64\xfb\xbd\x27\xe6\xe3\x34\x3a\xad\x3e\x04\x4f\xb6\x05\xbd\xad\xc5\xe9\xc4\x26\x3d\x78\x83\xa1\x16\x42\x6c\x9d\x07\x0d\xda\xc2\x02\xbe\x7c\x49\x36\x8c\x73\x7d\x4e\xc0\x01\xbf\xeb\x9f\xa0\x03\xd8\xc1\x98\x14\xfb\x89\x17\xe1\xc9\x1a\x2e\x1d\x45\xb5\x5a\x08\xe4\xe4\x4b\x79\xaf\x8e\xc8\x0e\x03\x7b\x6d\xbb\x29\x1e\x70\x06\x52\x46\x97\x9e\x78\xf0\x16\xa6\xde\x3d\x4e\x45\x51\x14\xe8\xaf\xe5\x30\x4a\x8b\x42\xee\x98\x7b\x6c\x5c\x4b\x72\x06\x5f\xef\xee\x66\x30\xf2\x99\x9e\xf8\x76\xc7\x7b\x23\x67\xef\x56\xc0\x53\xe8\x9d\x0d\x74\x45\xcc\xc7\x3e\x8a\x92\x99\x78\x36\xce\x32\xd9\x48\x02\x32\x56\x55\xf2\x12\x13\x9d\x08\x8c\x26\x3c\x46\x3a\x4a\x62\x20\xf4\xd4\x50\xcf\xda\x59\x78\x8c\xa9\x71\xbc\x23\x1f\xc6\x16\xe9\x88\x21\xb0\x6a\x1e\xa8\x85\x56\xab\xce\xba\xc0\xba\x09\x70\x40\xf2\xde\x79\x4c\x32\x58\x41\xdf\xe1\xd9\x0c\x26\x04\x4f\x5c\x0b\x51\xe0\x2e\xa5\xf1\x2e\xd2\xb9\x20\x27\x56\x3c\x72\x99\x0b\x7a\xd2\x9c\x7d\x47\xe6\x1a\xbe\x46\xe6\x86\x3a\x1d\x7b\xb4\xd0\x36\x90\xe7\xd8\xee\x0e\x10\x7b\xd7\x39\xcc\xce\x83\x28\x0a\x51\xe4\xec\xea\x76\x96\xce\xd8\x15\x98\xda\x22\xdf\x87\x40\x1e\x4f\xc2\xed\x60\x9b\x04\x30\xce\x62\x66\xf5\xca\xab\x7d\xc8\xb4\xd1\x96\xd0\x0e\xfb\x0d\xf9\xcc\x48\xc1\x8d\xe4\x6f\x13\xcd\x32\xbd\x5c\x13\x86\x53\x1e\x8b\x83\x32\x03\x45\x44\x23\xa0\x7d\xfb\xed\xed\xb0\x2c\x97\x07\xe5\x9b\x9d\xf2\xb1\x51\xd0\x60\x95\xad\x35\x83\xf7\x64\xf9\xe5\x65\x66\x2f\xf2\x21\xcb\x13\xee\x52\x66\x4e\xb9\x75\x7e\x5f\x66\x1a\x0d\x66\xe2\x55\x45\xce\x8e\xce\x70\x5f\x83\x27\xef\xf7\x67\xe8\xb9\x91\xb5\xed\x40\xb7\x63\x9a\xc9\x7b\xdd\x62\x2c\x43\x2a\xce\x48\x5c\x6b\x93\x34\x57\xa9\x90\xb6\x1d\xc7\x76\x9c\xa2\xe2\x72\x48\x3e\x1e\x90\x57\xe3\xf1\xed\xee\x2e\x61\xfd\xb7\xd9\xc8\x09\xfa\x78\x40\x4e\x53\xf6\x7a\x4c\x46\xee\xc5\xb0\xc8\xfb\xde\x13\x34\x46\x85\xb0\x9a\xf4\x9e\xe6\x47\x32\xc6\x3d\xce\x53\x5a\x27\x10\xf8\x68\x68\x35\xd9\xa8\xe6\xa1\xf3\x6e\xb0\xed\xbc\x71\xc6\xf9\x65\x7e\x55\x43\xbe\xf5\xda\x3e\xd4\x93\xf5\xcd\xcd\x0d\x24\x3d\xd8\xa9\x00\xae\x49\x15\x6e\x41\x66\xaf\x45\x5a\xed\x2a\x50\xce\xe4\x22\xae\xad\xe9\xa2\xca\xb9\x94\x51\xf7\x5e\x01\x2b\xdf\x11\xaf\x26\xb8\x31\xca\x3e\x4c\x60\xe7\x69\xbb\x9a\x24\xa3\xff\xeb\x51\xb7\xab\xb4\x51\xc7\x4a\xa5\x35\x3a\x59\xb7\xc4\x4a\x9b\x70\x7f\xab\xd6\x12\xc8\x04\x02\x29\xe3\x72\xab\x5e\xfc\x4a\xb8\xb9\xb9\xb9\xbf\xed\x3d\xad\x33\x9a\x24\xcb\x8d\x28\x55\xdf\x1b\xdd\xa8\x58\xe4\xdb\x98\xc9\xff\x2c\xe9\xa3\xb1\x37\x49\xbf\xaa\x59\xc8\xd8\xb0\x43\x88\xca\x29\xe6\xb1\xf5\x8b\x22\x5f\x51\xb7\x72\x76\x8a\x3e\x4b\x2a\xb8\x88\x27\xae\xb6\x2a\x7d\x0c\xa9\x27\xcb\x52\x18\x65\xbb\x41\x75\x04\xbd\xe9\xbb\xf0\xdb\x40\x79\x70\x46\xb1\x36\x9a\x8f\xd8\x28\xa6\xce\xf9\x63\x59\x0b\xf1\x83\x85\x68\xc9\x10\x13\x6c\xbd\xdb\x9f\x77\x0e\x53\xe0\x58\xb4\x10\xab\xe6\x09\x7a\xd5\x51\xda\x24\xb0\x02\x99\xbf\x77\x59\x0b\xf1\xde\xba\x3a\xab\x8a\x40\x86\x1a\x86\x56\x07\xd6\xb6\xe1\xb3\xe2\x0c\x06\x6b\x29\xf0\xd4\x53\x47\x4f\x3d\x86\xde\x68\x8e\xff\x4e\xfa\x80\xa6\xe5\xd9\x42\x39\x03\x39\x93\x29\xb4\xf7\x40\xb6\xd4\x93\x6d\xc9\x36\xfa\x6f\x70\x5e\x6a\xff\x35\xd4\x4b\x23\x97\x68\x1d\x94\xa5\x18\xb7\xfa\x7b\xce\x1b\xb7\xef\xb5\xa1\x16\x83\x1b\x7c\x43\x30\x4d\x5b\x1a\x8c\x8a\xb1\xe3\x81\x7c\xd0\xce\x56\x62\xdc\xb4\x30\x7d\xc1\xb3\xa8\xea\x0f\x3f\xb1\xa1\x6f\x15\xd3\x35\x47\xa2\x08\xc4\x7f\xb8\x81\xd5\x9f\x8c\xcf\xb0\x10\x45\x4e\xe8\x9b\x5c\x8e\x2d\x56\x0b\xf1\xb1\x27\x88\x8e\x74\x40\xeb\xd4\xc0\x3b\x58\x41\x79\xbe\x94\x70\xc5\xb6\x10\x65\x4b\x9b\xa1\xeb\xc8\xe3\xc6\x93\x7a\xe8\x9d\xb6\x1c\x4a\x21\x7e\xfc\x16\xff\x04\x00\x00\xff\xff\xed\x7a\x6c\xe7\x7d\x0a\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2685, mode: os.FileMode(436), modTime: time.Unix(1562165499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xcd\x4b\xb1\xe6\x52\x51\xe1\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\x28\xc8\x29\x48\x2f\x2e\xcc\x51\x50\x29\xcb\xcf\x49\x2c\xc9\xcc\xc9\x2c\xa9\x8c\x4f\x4e\x2c\x49\x4d\xcf\x2f\xaa\x54\xb1\xe6\xe2\x8a\x29\x01\x04\x00\x00\xff\xff\xe5\xcd\x1c\xfa\x34\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 52, mode: os.FileMode(436), modTime: time.Unix(1562250843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

