// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x6e\xe3\x30\x0c\x3c\xc7\xaf\xe0\x41\x80\x6c\x20\xd8\xcd\xee\x31\xd9\xed\x47\xd2\x80\x90\x65\xc6\x76\x62\x4b\x06\x45\x05\xed\xef\x0b\xaa\x8d\xd1\xf4\x94\x8b\x31\x1c\x8e\x35\x1c\xf2\x55\x2a\xcf\xe4\x84\xe0\x9c\x83\x97\x31\x06\x30\x77\x64\xa0\x36\x8b\x63\x37\x93\x10\x27\xd3\x54\x4c\x92\x39\x24\x30\x5f\xc0\x80\x4b\x60\x4c\xd5\x91\x9f\x1c\x53\xb5\x41\x8f\x20\xe3\x4c\x49\xdc\xbc\xc0\xfe\x3f\xf8\x29\xfa\x2b\xae\x54\xdd\x1c\xaa\x0d\x0a\x82\xd0\x9b\x28\x9c\x10\xc6\x20\xd4\x13\xab\x7a\xa7\xd4\x0d\xe1\xe6\xd8\x0f\x8e\x8f\x27\xad\xc3\x83\xe4\x8f\x52\xdd\x03\x65\x3a\x6a\x73\x6f\x4a\x23\x21\x5c\x52\x0c\xad\xf2\x05\x60\x9b\xc7\xa9\xc3\xd8\x5e\xc8\x8b\xda\x03\x00\xa8\xae\x7d\x52\x7a\xd6\xfc\xd8\xd1\x22\xc3\xea\x5a\x42\x0c\x4c\xae\xc3\xb1\x5b\xc7\xd5\x87\x6a\x1f\xdd\x44\xc9\x53\x1d\xf2\x34\x8d\xe7\xda\x67\x66\x0a\x82\x89\x44\xc6\xd0\xd7\x16\x71\x89\x7d\xfc\xb5\xfe\x6e\xb7\x20\x9c\xa9\xd9\x82\xb5\xfa\xf9\x17\x7e\xbb\x17\xdb\x94\x45\x0d\x0f\x39\xff\xee\xca\x7e\x88\xf9\x87\xa9\xb5\x65\xa0\xe7\x76\x3f\x7f\x8b\x6d\x8f\x27\xbb\xdf\x97\x52\x7b\x8c\xa0\xb3\x21\x7e\x9e\x17\x51\xde\x17\x3a\x54\x9b\x9b\x7a\x46\xc6\x24\xce\x5f\xcb\xe9\xee\xae\x1f\x01\x00\x00\xff\xff\xd5\x41\xfa\xb1\x3e\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 574, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xeb\x5e\xc2\x77\xf8\xf2\xfd\x9f\xe6\xb2\x32\x19\xc3\x3a\x25\x5b\xed\x02\xfe\x8f\x3c\x44\x7f\x90\xd2\x17\x1b\xeb\xf0\xc9\x29\xdb\x54\x19\xe0\x7f\xc1\x03\x0d\xf0\xde\x15\xce\x8d\x94\xdd\x13\x96\x81\x70\x1b\x5d\x16\x78\x7d\xbf\x03\x2e\xb3\xb6\x82\x7d\xb9\x71\xb6\x98\xae\x77\x69\x79\xec\x01\x00\xe0\x7a\xae\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\x99\xb0\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\x33\x14\x73\xa7\xc6\x23\x73\x94\xd9\x5a\x5d\x63\x9e\xaa\x2c\x86\x83\xcd\xaa\x6c\x31\x20\x1e\x7d\xeb\xcf\xff\xef\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\x44\x52\x60\x81\x19\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 281, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x8f\xdb\x36\x10\x3d\x8b\xbf\x62\x62\xa8\xa0\xe4\xd8\xd9\x75\x8b\x1c\x22\xad\x5d\x04\x45\x2f\x41\x91\x1c\xda\x43\x81\x24\x98\xd0\xd2\x58\x66\x96\x26\x15\x92\x72\xd6\xc0\xfe\xf8\x82\xa4\xfc\x91\xec\x6e\x80\xe6\x60\x93\x1c\x92\xf3\x1e\xdf\x70\x86\x92\x1b\xc0\x16\x61\x05\xd7\xe0\xb7\xa4\x59\x86\x7b\x7c\x8f\x1a\x3f\x42\xb5\x04\x7e\xf3\x6c\x3e\x07\xd2\x6d\x05\xb9\x16\x3b\xca\x61\x3e\x5f\xf1\x1a\x50\x63\x98\x0e\xcd\x73\x58\xd4\x8f\x6d\xe2\x70\x7f\x0f\x45\xa3\x4c\x73\x8b\x5e\xee\xc8\x79\xb1\xeb\x8b\x12\xe6\x80\x0d\x96\x50\x55\x20\xb5\x27\xbb\x17\x2a\x2c\xe4\x4f\x39\x0e\xf4\xfc\x0e\xe1\xd9\x12\xf8\xfb\x8f\xbc\xaa\x3e\x3b\xa3\xd7\x23\xd5\x2c\x4e\x85\xf5\xa1\xbd\xbf\x87\x38\x89\xeb\x41\xaa\x16\xcd\xfa\x33\x35\xbe\xe0\x7f\x49\x4d\xf1\x08\x7c\x06\xc5\x43\x42\x73\xf4\x0d\x96\x55\x75\x64\x53\x96\x75\x70\xfc\xf8\x79\x92\xff\xde\x92\xf7\x87\x22\x80\x96\x3f\x24\x4f\xba\x05\xb9\xa9\xd9\xb1\xc5\x26\x2e\x78\xc0\xa1\x66\x8c\x6d\x8c\x05\x09\x52\xc3\x02\x5e\xbc\x88\x3e\x94\x31\x7d\x12\x60\x8f\xef\xe5\x47\x90\x0e\xf4\xa0\x54\x3c\xfb\xd1\x16\xe8\xf1\x1a\x2e\x81\xc2\xb6\x9a\x31\xf4\x11\x4b\x58\x2b\x0e\xe8\x0d\x3a\x6f\xa5\xee\x0a\xdc\xe3\x0c\x38\x0f\x90\x8e\x14\x35\x1e\x70\x8b\x33\x40\x8f\x2c\xbb\x9a\x86\xc3\xfc\xcf\xe8\xb1\x2c\x2a\x70\x95\xb6\xa0\xc6\x6f\x0d\xde\xca\x5d\xe1\x0d\x36\x5b\x61\x0b\x45\xba\xf3\xdb\x02\x3d\x96\x33\xe0\xaf\x5e\xbd\x9a\x5d\xfc\x78\x79\x21\xe6\xf4\x8a\x49\xed\x0d\xa0\xc5\x9a\x59\xf2\x83\xd5\xa9\xcf\xe8\xae\xa1\xde\x4b\xa3\xe1\x6b\xd0\xc1\xf8\x2d\x59\x37\xde\x87\x8e\x3c\x38\x2f\x9a\x5b\x6a\xa1\x95\xa2\xd3\xc6\x79\xd9\x38\xd8\x23\x59\x6b\x2c\xc6\x39\x58\x42\xdf\xe1\xc9\x0d\x36\x46\x7b\xba\xf3\x35\x63\x19\x6e\xa3\x66\xd7\xa1\x9f\xd4\x3f\x9a\x42\x93\x62\x9a\xd1\x9d\xf4\x09\x3b\x18\x57\xf0\x6b\x30\xae\xa9\x93\xe1\x42\x66\x52\x3b\xb2\x1e\x12\x79\xec\x4d\x67\x30\x81\xbb\x30\x5b\x84\xbf\x4c\xb6\xb3\xd8\x06\x61\x31\x2a\x9b\xc6\x83\x23\x8b\xc7\xc9\xcd\xa0\x9b\xc8\x2f\xe4\x5d\x32\xf5\xc2\x8a\x9d\x4b\x7d\x25\x35\xa1\x1e\x76\x6b\xb2\xc9\x10\xcf\x36\x76\xbf\xa8\xe0\xd6\xd3\x79\x18\x29\x84\x51\x19\xfe\xf6\x42\x0d\x74\x41\x68\xd7\xbe\x7c\x18\xeb\xaa\xda\x0b\x1b\xc2\x16\xe3\xaa\xb0\x4c\xde\x9a\xc1\x5a\xd2\xfe\xbc\x32\x99\x17\xa9\xe1\xf9\x91\x77\xce\x93\x25\xdf\x18\xbb\xcb\x53\x1f\x15\xa6\xce\x37\x01\x39\x01\x9d\xe8\x7e\x4b\x9e\xac\xdd\x9d\xa8\xa7\xbb\x20\x75\x07\xb2\x1d\x55\x26\x6b\x65\x8b\x21\x0a\x31\x36\x63\xe7\xa9\x5b\x12\x73\x28\xc6\x51\xb7\x63\x8a\x8e\x19\x93\xcd\xe7\xf0\xf6\xdd\x3f\x7f\x56\xf0\x87\xd0\xdc\x43\xb3\x15\xba\x23\x90\x1e\xbc\x81\x37\x7f\xbf\x7b\x0b\x5b\xb2\x04\x4e\xea\x26\x5a\xbf\x4a\xa5\x60\x6d\x49\xdc\x06\xc7\xa0\x8d\x86\xd7\x6f\x5e\xff\x0b\x83\xa3\x46\x38\x62\xd9\x98\x60\x2f\xaf\xaf\x67\xc0\x6f\x7a\x4b\xd0\x28\xe1\xdc\x72\xd2\x5b\x9a\x1f\x48\x29\xf3\x75\x1e\x75\x98\x80\xf3\x07\x45\xcb\xc9\x5a\x34\xb7\x9d\x35\x83\x6e\xe7\x8d\x51\xc6\x56\x69\x55\x0d\x69\xd4\x4b\x7d\x5b\x4f\x56\xd3\xe9\x14\xe2\x3e\xd8\x0a\x07\xa6\x89\x21\x69\x81\xb3\xf9\x3c\x4b\xc9\x27\x35\x7c\x3a\x47\xe2\x13\x84\xdb\x32\x26\xa8\xc2\xf3\xb2\xa8\x73\xb2\x9f\x75\x8e\x89\x2f\x1c\x25\xe5\x16\xc1\x57\xb1\x28\x93\x76\x3c\x40\xdf\x08\xf0\xc2\x76\xe4\x97\x13\x5c\x2b\xa1\x6f\x27\xb0\xb5\xb4\x59\x4e\x22\xa7\xdf\x7b\x94\xed\x32\x61\xa5\xc8\xc4\xac\x9e\xac\x5a\xf2\x42\x2a\x77\x73\x25\x56\x1c\x48\x39\x02\xce\x43\xe1\x2a\xd9\xc8\x66\x3a\x9d\xde\x5c\xf5\x96\x56\x9c\xb1\xec\x9c\xfd\x2c\xbb\xcc\xff\x18\xb5\x3c\x67\x4a\xe8\x6e\x10\x1d\x41\xaf\xfa\xce\x7d\x51\x90\xef\x8d\x12\x5e\x2a\xe9\x0f\xd8\x08\x4f\x9d\xb1\x87\xbc\x66\xec\x83\x67\xac\x25\x45\x9e\x60\x63\xcd\xee\x94\x94\x9e\x9c\x0f\xc7\x74\xe1\x9c\x96\xa0\x17\x1d\xc5\x5c\x83\x25\xf0\xf4\xd8\xf1\x9a\xb1\xc7\xf2\xf9\xb4\xf5\x58\x42\x5b\xe9\xbc\xd4\x8d\x3f\x6d\x9c\xc1\xa0\x35\x39\x5f\x58\xea\xe8\xae\x47\xd7\x2b\xe9\x43\x15\x8e\xe5\xb8\xc8\x4f\x1e\xf2\x19\xf0\x19\x0f\x6f\xce\xa3\x24\x5b\xea\x49\xb7\xa4\x1b\xf9\x33\x3c\x2f\x77\xff\x34\xd5\x4b\x27\x97\x6c\x0d\xe4\x39\x1b\xcb\xde\x63\xe0\x8d\xd9\xf5\x52\x51\x8b\xce\x0c\xb6\x21\x28\x62\x1d\x03\x25\xc2\xd9\x71\x4f\xd6\x49\xa3\x4b\x36\xd6\x22\x28\xce\x7c\x16\x65\xfd\xc3\x2a\x3f\xf4\x6d\xb8\xb6\x4f\x00\x85\xb4\xf3\xdf\xc1\xc0\xf2\x7b\xc3\x73\x58\xb0\x2c\x09\xfa\x40\xcb\xf1\x8a\xd5\x8c\xfd\x18\x09\x02\x90\x74\xa8\x8d\x18\xfc\x16\x96\x90\x9f\x06\x39\x3c\xe1\x9b\xb1\xab\x69\x92\xae\xa5\x46\x09\x4b\x2c\xf3\x10\x9e\x9f\xf8\x5d\xb0\xb5\xc5\xe2\xb7\xf0\xfd\x61\x21\x21\xa6\x9b\x8f\xe8\x0f\x3d\xd5\x47\xb5\x6d\x58\xdb\xbb\x1e\x93\xd7\x82\xc7\x8c\x5b\x8c\xca\x65\xd1\x95\x0f\x49\x37\x3e\xb7\xf6\x85\x25\xd7\x1b\xed\x08\x03\x52\x59\x55\x11\xf0\xfe\xfe\x08\x78\xd1\x0d\xd8\x42\x3a\x02\xa9\x37\x06\xf8\x2f\x7c\x06\xfe\xac\xc8\xf4\x8a\xb1\xbc\xa5\xf5\xd0\x75\x64\x31\x96\xbe\xde\x48\xed\x5d\xce\xd8\x87\x2f\xec\xbf\x00\x00\x00\xff\xff\x18\x33\x24\xb9\x4b\x0a\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2635, mode: os.FileMode(438), modTime: time.Unix(1560865830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xcd\x4b\xb1\xe6\x52\x51\xe1\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\x28\xc8\x29\x48\x2f\x2e\xcc\x51\x50\x29\xcb\xcf\x49\x2c\xc9\xcc\xc9\x2c\xa9\x8c\x4f\x4e\x2c\x49\x4d\xcf\x2f\xaa\x54\xb1\xe6\xe2\x8a\x29\xe1\x8a\x29\xe4\x02\x04\x00\x00\xff\xff\x43\xbb\x67\x3e\x38\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 56, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(438), modTime: time.Unix(1559978435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

