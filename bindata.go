// Code generated by go-bindata.
// sources:
// templates/template_psp_function_begin.sql
// templates/template_psp_function_begin_raw.sql
// templates/template_psp_function_begin_view.sql
// templates/template_psp_function_drop.sql
// templates/template_psp_function_end.sql
// templates/template_psp_function_end_raw.sql
// templates/template_psp_function_end_view.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplate_psp_function_beginSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x8e\xdb\x30\x0c\x3c\xaf\xbf\x82\x30\x04\xc8\x06\x16\xdd\xf6\xea\x3e\x7e\x64\xbb\x20\x64\x89\xb1\xb5\x91\x25\x83\xa2\x83\x02\x41\xfe\xbd\x90\xda\x3a\x49\xf7\x92\x8b\x31\x1c\x8d\x38\x43\x5a\x3f\xa5\xb1\x4c\x46\x08\x0e\x5b\xb4\xe2\x53\x04\xf5\x0f\x29\xe8\xd4\x6a\xd8\x2c\x24\xc4\x59\xf5\x0d\x93\x6c\x1c\x33\xa8\xbf\x40\x81\xc9\xa0\x54\xe3\xc8\x06\xc3\xd4\x3c\xa1\x45\x10\xbf\x50\x16\xb3\xac\x30\x7c\x07\x1b\x92\x3d\xe2\x4e\x75\xfd\xd7\xe6\x09\x05\x41\xe8\x97\x14\x18\x10\x7c\x14\x9a\x88\x8b\xfa\x73\xa1\x4e\x08\x27\xc3\x76\x36\xfc\xfa\x56\xea\x78\x27\xf9\x52\x28\x77\x47\x29\x47\xe3\x36\xa9\x7a\x90\x11\xde\x73\x8a\x63\xe1\x2b\xc0\x71\xf3\xc1\x61\x1a\xdf\xc9\xca\x1f\x7b\x97\x71\x7c\x44\x77\x28\x93\xa3\xa3\x55\xe6\xdd\xaf\xc6\x9f\x99\x8c\x43\xef\xf6\xa0\xa5\x4b\x67\x93\x09\x94\x2d\x75\x71\x0b\xc1\x1f\x3a\xbb\x31\x53\x14\xcc\x24\xe2\xe3\xd4\x69\xc4\x35\x4d\xe9\xd3\x7e\x5d\x3f\x83\xf0\x46\xfd\x33\x68\x5d\x3e\xdf\xe2\x8b\xf9\xa1\xfb\xea\x4d\xcc\xff\xf5\xd7\xba\x7a\x3f\xb6\xe0\xe5\x66\x3c\xfd\xfa\xa6\x87\xa1\x96\xe5\x6c\xfe\xb8\x71\xbe\x55\x9f\x2f\x37\xea\x53\x09\x92\x18\xb3\x18\x7b\xac\x3f\xed\x1a\xa5\x68\xee\x6f\xb6\x66\x5d\x83\xb7\xa6\xbc\x9d\x97\xc2\xb7\x03\x9c\x5b\xa6\xbc\xa6\x98\xa9\x16\x36\x45\xa1\x28\xed\x00\x65\x4b\x97\xcb\xd5\xec\x77\x00\x00\x00\xff\xff\x9a\xb8\xfb\x65\x89\x02\x00\x00")

func templatesTemplate_psp_function_beginSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_beginSql,
		"templates/template_psp_function_begin.sql",
	)
}

func templatesTemplate_psp_function_beginSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_beginSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin.sql", size: 649, mode: os.FileMode(436), modTime: time.Unix(1562165830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xc1\x4a\x04\x31\x0c\x86\xcf\xf6\x29\x72\x28\xb4\x85\x45\xef\xae\xfa\x24\x42\xc8\xb4\x99\x99\x2e\x35\x1d\xd2\xd4\xe7\x97\x61\xd5\xf3\x5e\xc2\x47\xf8\xfe\xff\xff\x34\x97\x95\xc9\x18\xd6\x29\xd9\x6a\x17\xf0\x7f\xe4\x21\xfa\x83\x94\xbe\xd8\x58\x87\x4f\x4e\xd9\xa6\xca\x00\xff\x0b\x1e\x68\x80\xf7\xae\x70\x6e\xa4\xec\x9e\xb0\x0c\x84\xdb\xe8\xb2\xc0\xeb\xfb\x1d\x70\x99\xb5\x15\xec\xcb\x8d\xb3\xc5\x74\xbd\x4b\xcb\x23\xde\x7a\x4e\x63\xe1\xc3\x76\x84\x2a\xc6\x1b\xeb\xf9\xb7\x5d\x99\x0a\xd6\x82\xf0\x4d\x9a\x77\xd2\xb3\x25\xe6\x4e\x8d\x47\xe6\x28\xb3\xb5\xba\xc6\x3c\x55\x59\x0c\x07\x9b\x55\xd9\x62\x40\x3c\xfa\xd6\x9f\xff\xe3\xe1\x02\xa6\x93\xd3\x05\x42\x38\xcf\x9b\xbc\xd0\x47\x48\xe9\xea\x7e\x02\x00\x00\xff\xff\xf8\xc6\x18\x60\x16\x01\x00\x00")

func templatesTemplate_psp_function_begin_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_rawSql,
		"templates/template_psp_function_begin_raw.sql",
	)
}

func templatesTemplate_psp_function_begin_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_raw.sql", size: 278, mode: os.FileMode(436), modTime: time.Unix(1561987719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_begin_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\xe1\x4a\x29\xca\x2f\x50\x28\xcb\x4c\x2d\x57\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x49\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\xb1\xe6\x4a\x2e\x4a\x4d\x2c\x49\x85\xa8\x40\x88\x73\x25\x16\x73\x01\x02\x00\x00\xff\xff\x4f\xab\x4a\x90\x3d\x00\x00\x00")

func templatesTemplate_psp_function_begin_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_begin_viewSql,
		"templates/template_psp_function_begin_view.sql",
	)
}

func templatesTemplate_psp_function_begin_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_begin_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_begin_view.sql", size: 61, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_dropSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\xc1\x0d\xc3\x30\x08\x05\xd0\x7b\xa7\xe0\x80\xe4\xf6\xda\xab\x87\x41\xad\x01\xcb\x52\xcc\x47\x4e\xb2\x7f\x16\xc8\x29\x0b\x3c\x05\x31\xd3\xdf\xfa\x08\x4a\x5b\x8e\x35\xc9\x45\x17\x52\x12\x1d\xd2\x30\x73\x6c\xa6\xe2\x67\xb4\x63\x20\xde\x25\xf7\xfc\x0a\xc7\x6f\x1a\x97\x4f\x25\x0b\x25\xe6\xfa\x7a\x20\xf9\x0d\x73\x05\x00\x00\xff\xff\x35\xe6\x68\xa2\x91\x00\x00\x00")

func templatesTemplate_psp_function_dropSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_dropSql,
		"templates/template_psp_function_drop.sql",
	)
}

func templatesTemplate_psp_function_dropSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_dropSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_drop.sql", size: 145, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_endSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xef\x6e\xdb\x38\x0c\xff\x6c\x3d\x05\x17\x18\x50\xdc\x25\x6b\x33\x60\x5f\xe2\x26\xf7\x02\xf7\x06\xbb\x81\x50\x6c\xc6\xd1\xaa\x48\x9e\x44\xa7\x0d\xd0\x87\x3f\x48\x72\xd2\x74\x6d\x7a\xc0\x70\x9f\x44\x91\x22\xf9\xe3\x5f\xe9\x2d\x60\x8b\xb0\x86\x3b\xe0\x1d\x59\x51\xe0\x01\xbf\xa3\xc5\x1f\xb0\x5c\x81\xbc\xff\x34\x9f\x03\xd9\x76\x09\xa5\x55\x7b\x2a\x61\x3e\x5f\xcb\x1a\xd0\x62\x14\xc7\xe3\x33\x2c\xea\xf7\x94\x24\x3c\x3f\xc3\xb4\x31\xae\x79\x40\xd6\x7b\x0a\xac\xf6\xfd\xb4\x82\x39\x60\x83\x15\x2c\x97\xa0\x2d\x93\x3f\x28\x13\x1f\xca\x6b\x86\x23\x3c\xde\x23\x7c\x5a\x81\xfc\xfe\x43\x2e\x97\x3f\x83\xb3\x9b\x11\x6a\x91\x44\xf1\x7d\x3c\x9f\x9f\x21\x09\x71\x33\x68\xd3\xa2\xdb\xfc\xa4\x86\xa7\xf2\x6f\x6d\x29\x85\x20\x67\x30\x7d\x0b\x68\x8e\xdc\x60\xb5\x5c\x9e\xd0\x54\x55\x1d\x0d\xbf\x1f\x4f\xb6\xdf\x7b\x62\x3e\x4e\xa3\xd3\xea\x43\xf0\x64\x5b\xd0\xdb\x5a\x9c\x4e\x6c\xd2\x83\x37\x18\x6a\x21\xc4\xd6\x79\xd0\xa0\x2d\x2c\xe0\xcb\x97\x64\xc3\x38\xd7\xe7\x04\x1c\xf0\xbb\xfe\x01\x3a\x80\x1d\x8c\x49\xb1\x9f\x78\x11\x9e\xac\xe1\xd2\x51\x54\xab\x85\x40\x4e\xbe\x94\xf7\xea\x88\xec\x30\xb0\xd7\xb6\x9b\xe2\x01\x67\x20\x65\x74\xe9\x89\x07\x6f\x61\xea\xdd\xe3\x54\x14\x45\x81\xfe\x5a\x0e\xa3\xb4\x28\xe4\x8e\xb9\xc7\xc6\xb5\x24\x67\xf0\xf5\xee\x6e\x06\x23\x9f\xe9\x89\x6f\x77\xbc\x37\x72\xf6\x6e\x05\x3c\x85\xde\xd9\x40\x57\xc4\x7c\xec\xa3\x28\x99\x89\x67\xe3\x2c\x93\x8d\x24\x20\x63\x55\x25\x2f\x31\xd1\x89\xc0\x68\xc2\x63\xa4\xa3\x24\x06\x42\x4f\x0d\xf5\xac\x9d\x85\xc7\x98\x1a\xc7\x3b\xf2\x61\x6c\x91\x8e\x18\x02\xab\xe6\x81\x5a\x68\xb5\xea\xac\x0b\xac\x9b\x00\x07\x24\xef\x9d\xc7\x24\x83\x15\xf4\x1d\x9e\xcd\x60\x42\xf0\xc4\xb5\x10\x05\xee\x52\x1a\xef\x22\x9d\x0b\x72\x62\xc5\x23\x97\xb9\xa0\x27\xcd\xd9\x77\x64\xae\xe1\x6b\x64\x6e\xa8\xd3\xb1\x47\x0b\x6d\x03\x79\x8e\xed\xee\x00\xb1\x77\x9d\xc3\xec\x3c\x88\xa2\x10\x45\xce\xae\x6e\x67\xe9\x8c\x5d\x81\xa9\x2d\xf2\x7d\x08\xe4\xf1\x24\xdc\x0e\xb6\x49\x00\xe3\x2c\x66\x56\xaf\xbc\xda\x87\x4c\x1b\x6d\x09\xed\xb0\xdf\x90\xcf\x8c\x14\xdc\x48\xfe\x32\xd1\x2c\xd3\xcb\x35\x61\x38\xe5\xb1\x38\x28\x33\x50\x44\x34\x02\xda\xb7\xdf\xde\x0e\xcb\x72\x79\x50\xbe\xd9\x29\x1f\x1b\x05\x0d\x56\xd9\x5a\x33\x78\x4f\x96\x5f\x5e\x66\xf6\x22\x1f\xb2\x3c\xe1\x2e\x65\xe6\x94\x5b\xe7\xf7\x65\xa6\xd1\x60\x26\x5e\x55\xe4\xec\xe8\x0c\xf7\x35\x78\xf2\x7e\x7f\x86\x9e\x1b\x59\xdb\x0e\x74\x3b\xa6\x99\xbc\xd7\x2d\xc6\x32\xa4\xe2\x8c\xc4\xb5\x36\x49\x73\x95\x0a\x69\xdb\x71\x6c\xc7\x29\x2a\x2e\x87\xe4\xe3\x01\x79\x35\x1e\xdf\xee\xee\x12\xd6\xff\x9a\x8d\x9c\xa0\x8f\x07\xe4\x34\x65\xaf\xc7\x64\xe4\x5e\x0c\x8b\xbc\xef\x3d\x41\x63\x54\x08\xab\x49\xef\x69\x7e\x24\x63\xdc\xe3\x3c\xa5\x75\x02\x81\x8f\x86\x56\x93\x8d\x6a\x1e\x3a\xef\x06\xdb\xce\x1b\x67\x9c\x5f\xe6\x57\x35\xe4\x5b\xaf\xed\x43\x3d\x59\xdf\xdc\xdc\x40\xd2\x83\x9d\x0a\xe0\x9a\x54\xe1\x16\x64\xf6\x5a\xa4\xd5\xae\x02\xe5\x4c\x2e\xe2\xda\x9a\x2e\xaa\x9c\x4b\x19\x75\xef\x15\xb0\xf2\x1d\xf1\x6a\x82\x1b\xa3\xec\xc3\x04\x76\x9e\xb6\xab\x49\x32\xfa\x57\x8f\xba\x5d\xa5\x8d\x3a\x56\x2a\xad\xd1\xc9\xba\x25\x56\xda\x84\xfb\x5b\xb5\x96\x40\x26\x10\x48\x19\x97\x5b\xf5\xe2\x57\xc2\xcd\xcd\xcd\xfd\x6d\xef\x69\x9d\xd1\x24\x59\x6e\x44\xa9\xfa\xde\xe8\x46\xc5\x22\xdf\xc6\x4c\xfe\x6f\x49\x1f\x8d\xbd\x49\xfa\x55\xcd\x42\xc6\x86\x1d\x42\x54\x4e\x31\x8f\xad\x5f\x14\xf9\x8a\xba\x95\xb3\x53\xf4\x59\x52\xc1\x45\x3c\x71\xb5\x55\xe9\x63\x48\x3d\x59\x96\xc2\x28\xdb\x0d\xaa\x23\xe8\x4d\xdf\x85\x5f\x06\xca\x83\x33\x8a\xb5\xd1\x7c\xc4\x46\x31\x75\xce\x1f\xcb\x5a\x88\x7f\x58\x88\x96\x0c\x31\xc1\xd6\xbb\xfd\x79\xe7\x30\x05\x8e\x45\x0b\xb1\x6a\x9e\xa0\x57\x1d\xa5\x4d\x02\x2b\x90\xf9\x7b\x97\xb5\x10\xef\xad\xab\xb3\xaa\x08\x64\xa8\x61\x68\x75\x60\x6d\x1b\x3e\x2b\xce\x60\xb0\x96\x02\x4f\x3d\x75\xf4\xd4\x63\xe8\x8d\xe6\xf8\xef\xa4\x0f\x68\x5a\x9e\x2d\x94\x33\x90\x33\x99\x42\x7b\x0f\x64\x4b\x3d\xd9\x96\x6c\xa3\xff\x04\xe7\xa5\xf6\x1f\x43\xbd\x34\x72\x89\xd6\x41\x59\x8a\x71\xab\xbf\xe7\xbc\x71\xfb\x5e\x1b\x6a\x31\xb8\xc1\x37\x04\xd3\xb4\xa5\xc1\xa8\x18\x3b\x1e\xc8\x07\xed\x6c\x25\xc6\x4d\x0b\xd3\x17\x3c\x8b\xaa\xfe\xf0\x13\x1b\xfa\x56\x31\x5d\x73\x24\x8a\x40\xfc\x9b\x1b\x58\xfd\xce\xf8\x0c\x0b\x51\xe4\x84\xbe\xc9\xe5\xd8\x62\xb5\x10\x1f\x7b\x82\xe8\x48\x07\xb4\x4e\x0d\xbc\x83\x15\x94\xe7\x4b\x09\x57\x6c\x0b\x51\xb6\xb4\x19\xba\x8e\x3c\x6e\x3c\xa9\x87\xde\x69\xcb\xa1\x14\xff\x06\x00\x00\xff\xff\xe1\x9e\x39\x1f\x79\x0a\x00\x00")

func templatesTemplate_psp_function_endSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_endSql,
		"templates/template_psp_function_end.sql",
	)
}

func templatesTemplate_psp_function_endSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_endSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end.sql", size: 2681, mode: os.FileMode(436), modTime: time.Unix(1562251083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_rawSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xcd\x4b\xb1\xe6\x52\x51\xe1\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\x28\xc8\x29\x48\x2f\x2e\xcc\x51\x50\x29\xcb\xcf\x49\x2c\xc9\xcc\xc9\x2c\xa9\x8c\x4f\x4e\x2c\x49\x4d\xcf\x2f\xaa\x54\xb1\xe6\xe2\x8a\x29\x01\x04\x00\x00\xff\xff\xe5\xcd\x1c\xfa\x34\x00\x00\x00")

func templatesTemplate_psp_function_end_rawSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_rawSql,
		"templates/template_psp_function_end_raw.sql",
	)
}

func templatesTemplate_psp_function_end_rawSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_rawSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_raw.sql", size: 52, mode: os.FileMode(436), modTime: time.Unix(1562250843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate_psp_function_end_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\x02\x04\x00\x00\xff\xff\x6b\x13\xe3\x5b\x02\x00\x00\x00")

func templatesTemplate_psp_function_end_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate_psp_function_end_viewSql,
		"templates/template_psp_function_end_view.sql",
	)
}

func templatesTemplate_psp_function_end_viewSql() (*asset, error) {
	bytes, err := templatesTemplate_psp_function_end_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template_psp_function_end_view.sql", size: 2, mode: os.FileMode(436), modTime: time.Unix(1561987659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template_psp_function_begin.sql": templatesTemplate_psp_function_beginSql,
	"templates/template_psp_function_begin_raw.sql": templatesTemplate_psp_function_begin_rawSql,
	"templates/template_psp_function_begin_view.sql": templatesTemplate_psp_function_begin_viewSql,
	"templates/template_psp_function_drop.sql": templatesTemplate_psp_function_dropSql,
	"templates/template_psp_function_end.sql": templatesTemplate_psp_function_endSql,
	"templates/template_psp_function_end_raw.sql": templatesTemplate_psp_function_end_rawSql,
	"templates/template_psp_function_end_view.sql": templatesTemplate_psp_function_end_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template_psp_function_begin.sql": &bintree{templatesTemplate_psp_function_beginSql, map[string]*bintree{}},
		"template_psp_function_begin_raw.sql": &bintree{templatesTemplate_psp_function_begin_rawSql, map[string]*bintree{}},
		"template_psp_function_begin_view.sql": &bintree{templatesTemplate_psp_function_begin_viewSql, map[string]*bintree{}},
		"template_psp_function_drop.sql": &bintree{templatesTemplate_psp_function_dropSql, map[string]*bintree{}},
		"template_psp_function_end.sql": &bintree{templatesTemplate_psp_function_endSql, map[string]*bintree{}},
		"template_psp_function_end_raw.sql": &bintree{templatesTemplate_psp_function_end_rawSql, map[string]*bintree{}},
		"template_psp_function_end_view.sql": &bintree{templatesTemplate_psp_function_end_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

